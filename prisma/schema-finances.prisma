// Financial Management Models

// Fund types (General Fund, Building Fund, Missions Fund, etc.)
model Fund {
  id          String        @id @default(uuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  branchId    String?
  branch      Branch?       @relation(fields: [branchId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contributions Contribution[]
  expenses      Expense[]
  budgets       Budget[]

  @@index([branchId])
}

// Contribution types (Tithe, Offering, Donation, etc.)
model ContributionType {
  id          String        @id @default(uuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  branchId    String?
  branch      Branch?       @relation(fields: [branchId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contributions Contribution[]

  @@index([branchId])
}

// Payment methods (Cash, Check, Credit Card, Bank Transfer, etc.)
model PaymentMethod {
  id          String        @id @default(uuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  branchId    String?
  branch      Branch?       @relation(fields: [branchId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  contributions Contribution[]
  expenses      Expense[]

  @@index([branchId])
}

// Individual contributions (tithes, offerings, donations)
model Contribution {
  id                 String            @id @default(uuid())
  amount             Float
  date               DateTime
  notes              String?
  receiptNumber      String?
  isAnonymous        Boolean           @default(false)
  
  // Relations
  contributionTypeId String
  contributionType   ContributionType  @relation(fields: [contributionTypeId], references: [id])
  
  fundId             String
  fund               Fund              @relation(fields: [fundId], references: [id])
  
  paymentMethodId    String
  paymentMethod      PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  
  // Either member or external donor
  memberId           String?
  member             Member?           @relation(fields: [memberId], references: [id])
  
  donorName          String?
  donorEmail         String?
  donorPhone         String?
  donorAddress       String?
  
  // Batch information
  batchId            String?
  batch              Batch?            @relation(fields: [batchId], references: [id])
  
  // Pledge fulfillment
  pledgeId           String?
  pledge             Pledge?           @relation(fields: [pledgeId], references: [id])
  
  // Transaction details
  transactionId      String?           @unique
  transactionStatus  String?
  paymentGateway     String?
  
  branchId           String?
  branch             Branch?           @relation(fields: [branchId], references: [id])
  
  createdById        String?
  updatedById        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([contributionTypeId])
  @@index([fundId])
  @@index([paymentMethodId])
  @@index([memberId])
  @@index([batchId])
  @@index([pledgeId])
  @@index([branchId])
  @@index([date])
  @@index([transactionId])
}

// Batches for bulk contribution entry
model Batch {
  id          String         @id @default(uuid())
  name        String
  date        DateTime
  notes       String?
  status      String         // OPEN, CLOSED, RECONCILED
  totalAmount Float
  branchId    String?
  branch      Branch?        @relation(fields: [branchId], references: [id])
  createdById String?
  updatedById String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  contributions Contribution[]

  @@index([branchId])
  @@index([date])
  @@index([status])
}

// Pledges made by members
model Pledge {
  id              String         @id @default(uuid())
  amount          Float
  startDate       DateTime
  endDate         DateTime?
  frequency       String         // ONE_TIME, WEEKLY, MONTHLY, QUARTERLY, ANNUALLY
  status          String         // ACTIVE, COMPLETED, CANCELLED
  notes           String?
  
  // Relations
  memberId        String
  member          Member         @relation(fields: [memberId], references: [id])
  
  fundId          String
  fund            Fund           @relation(fields: [fundId], references: [id])
  
  branchId        String?
  branch          Branch?        @relation(fields: [branchId], references: [id])
  
  // Fulfillment tracking
  amountFulfilled Float          @default(0)
  contributions   Contribution[]
  
  createdById     String?
  updatedById     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([memberId])
  @@index([fundId])
  @@index([branchId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

// Expense categories
model ExpenseCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  branchId    String?
  branch      Branch?   @relation(fields: [branchId], references: [id])
  parentId    String?
  parent      ExpenseCategory? @relation("SubCategories", fields: [parentId], references: [id])
  subCategories ExpenseCategory[] @relation("SubCategories")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  expenses    Expense[]

  @@index([branchId])
  @@index([parentId])
}

// Church expenses
model Expense {
  id                 String          @id @default(uuid())
  amount             Float
  date               DateTime
  description        String
  receiptNumber      String?
  invoiceNumber      String?
  
  // Relations
  expenseCategoryId  String
  expenseCategory    ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
  
  fundId             String
  fund               Fund            @relation(fields: [fundId], references: [id])
  
  paymentMethodId    String
  paymentMethod      PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  
  // Vendor information
  vendorId           String?
  vendor             Vendor?         @relation(fields: [vendorId], references: [id])
  
  vendorName         String?
  vendorContact      String?
  
  branchId           String?
  branch             Branch?         @relation(fields: [branchId], references: [id])
  
  // Budget allocation
  budgetId           String?
  budget             Budget?         @relation(fields: [budgetId], references: [id])
  
  createdById        String?
  updatedById        String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([expenseCategoryId])
  @@index([fundId])
  @@index([paymentMethodId])
  @@index([vendorId])
  @@index([branchId])
  @@index([budgetId])
  @@index([date])
}

// Vendors/Suppliers
model Vendor {
  id          String    @id @default(uuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  notes       String?
  isActive    Boolean   @default(true)
  branchId    String?
  branch      Branch?   @relation(fields: [branchId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  expenses    Expense[]

  @@index([branchId])
}

// Budgets for different departments/ministries
model Budget {
  id              String    @id @default(uuid())
  name            String
  description     String?
  fiscalYear      Int
  startDate       DateTime
  endDate         DateTime
  totalAmount     Float
  status          String    // DRAFT, ACTIVE, CLOSED
  notes           String?
  
  // Relations
  fundId          String
  fund            Fund      @relation(fields: [fundId], references: [id])
  
  ministryId      String?
  // ministry        Ministry? @relation(fields: [ministryId], references: [id])
  
  branchId        String?
  branch          Branch?   @relation(fields: [branchId], references: [id])
  
  // Budget items and expenses
  budgetItems     BudgetItem[]
  expenses        Expense[]
  
  createdById     String?
  updatedById     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([fundId])
  @@index([ministryId])
  @@index([branchId])
  @@index([fiscalYear])
  @@index([status])
}

// Individual budget line items
model BudgetItem {
  id                 String          @id @default(uuid())
  name               String
  description        String?
  amount             Float
  
  // Relations
  budgetId           String
  budget             Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  expenseCategoryId  String?
  expenseCategory    ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])
  
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([budgetId])
  @@index([expenseCategoryId])
}

// Add these relations to the existing Member model
// model Member {
//   // Existing fields...
//   
//   // Financial relations
//   contributions   Contribution[]
//   pledges         Pledge[]
// }

// Add these relations to the existing Branch model
// model Branch {
//   // Existing fields...
//   
//   // Financial relations
//   funds             Fund[]
//   contributionTypes ContributionType[]
//   paymentMethods    PaymentMethod[]
//   contributions     Contribution[]
//   batches           Batch[]
//   pledges           Pledge[]
//   expenseCategories ExpenseCategory[]
//   expenses          Expense[]
//   vendors           Vendor[]
//   budgets           Budget[]
// }
