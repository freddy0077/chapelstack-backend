generator client {
  provider      = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                    @id @default(uuid())
  email                         String                    @unique
  passwordHash                  String
  firstName                     String?
  lastName                      String?
  phoneNumber                   String?
  isActive                      Boolean                   @default(true)
  isEmailVerified               Boolean                   @default(false)
  lastLoginAt                   DateTime?
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @updatedAt
  organisationId                String?
  passwordResetToken            String?                   @db.VarChar(255)
  passwordResetTokenExpiry      DateTime?
  attendanceRecordsRecorded     AttendanceRecord[]        @relation("UserAttendanceRecords")
  auditLogs                     AuditLog[]
  backups                       Backup[]
  careRequestsAssigned          CareRequest[]             @relation("CareRequestAssignedPastor")
  careRequestsCreated           CareRequest[]             @relation("CareRequestCreator")
  counselingSessionsAsCounselor CounselingSession[]       @relation("CounselingSessionCounselor")
  counselingSessionsCreated     CounselingSession[]       @relation("CounselingSessionCreator")
  dataOperations                DataOperation[]
  eventsCreated                 Event[]                   @relation("EventCreatedBy")
  eventsUpdated                 Event[]                   @relation("EventUpdatedBy")
  followUpRemindersAssigned     FollowUpReminder[]        @relation("FollowUpReminderAssignedTo")
  followUpRemindersCreated      FollowUpReminder[]        @relation("FollowUpReminderCreator")
  member                        Member?                   @relation("UserToMember")
  MembershipHistory             MembershipHistory[]
  Notification                  Notification[]
  suspendedOrganizations        Organisation[]            @relation("OrganizationSuspendedBy")
  pastoralVisitsCreated         PastoralVisit[]           @relation("PastoralVisitCreator")
  pastoralVisitsAsPastor        PastoralVisit[]           @relation("PastoralVisitPastor")
  prayerRequestsAssigned        PrayerRequest[]           @relation("AssignedPrayerRequests")
  refreshTokens                 RefreshToken[]
  scheduledReports              ScheduledReport[]         @relation("UserCreatedReports")
  transactions                  Transaction[]             @relation("UserTransactions")
  organisation                  Organisation?             @relation(fields: [organisationId], references: [id])
  userBranches                  UserBranch[]
  dashboardPreferences          UserDashboardPreference[]
  triggeredWorkflowExecutions   WorkflowExecution[]
  createdWorkflowTemplates      WorkflowTemplate[]
  roles                         Role[]                    @relation("UserRoles")

  @@index([organisationId])
}

model Role {
  id           String       @id @default(uuid())
  name         String       @unique
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userBranches UserBranch[]
  permissions  Permission[] @relation("RolePermissions")
  users        User[]       @relation("UserRoles")

  @@index([name])
}

model Permission {
  id          String   @id @default(uuid())
  action      String
  subject     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("RolePermissions")

  @@unique([action, subject])
}

model Branch {
  id                         String                      @id @default(uuid())
  name                       String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  address                    String?
  city                       String?
  country                    String?
  email                      String?                     @unique
  establishedAt              DateTime?
  isActive                   Boolean                     @default(true)
  phoneNumber                String?
  postalCode                 String?
  state                      String?
  website                    String?
  organisationId             String?
  attendanceRecords          AttendanceRecord[]          @relation("BranchAttendanceRecords")
  attendanceSessions         AttendanceSession[]
  auditLogs                  AuditLog[]
  batches                    Batch[]
  organisation               Organisation?               @relation(fields: [organisationId], references: [id])
  settings                   BranchSetting[]
  budgets                    Budget[]
  careRequests               CareRequest[]
  checkInRecords             CheckInRecord[]
  children                   Child[]
  childrenEvents             ChildrenEvent[]
  childrenMinistryVolunteers ChildrenMinistryVolunteer[]
  contributions              Contribution[]
  contributionTypes          ContributionType[]
  counselingSessions         CounselingSession[]
  EmailMessage               EmailMessage[]
  EmailTemplate              EmailTemplate[]
  events                     Event[]                     @relation("BranchEvents")
  expenses                   Expense[]
  expenseCategories          ExpenseCategory[]
  followUpReminders          FollowUpReminder[]
  forms                      Form[]
  formSubmissions            FormSubmission[]
  funds                      Fund[]
  guardians                  Guardian[]
  mediaItems                 MediaItem[]
  members                    Member[]
  memberIdSequences          MemberIdSequence[]
  fromBranchHistory          MembershipHistory[]         @relation("FromBranchHistory")
  toBranchHistory            MembershipHistory[]         @relation("ToBranchHistory")
  Ministry                   Ministry[]
  notifications              Notification[]
  onboardingProgress         OnboardingProgress?
  pastoralVisits             PastoralVisit[]
  paymentMethods             PaymentMethod[]
  pledges                    Pledge[]
  prayerRequests             PrayerRequest[]
  sacramentalRecords         SacramentalRecord[]
  scheduledReports           ScheduledReport[]
  series                     Series[]
  sermons                    Sermon[]
  settingsModuleEntries      Setting[]                   @relation("SettingsModuleBranchSpecific")
  SmallGroup                 SmallGroup[]
  SmsMessage                 SmsMessage[]
  speakers                   Speaker[]
  transactions               Transaction[]               @relation("BranchTransactions")
  destinationTransfers       TransferRequest[]           @relation("DestinationBranchTransfers")
  sourceTransfers            TransferRequest[]           @relation("SourceBranchTransfers")
  userBranches               UserBranch[]
  userDashboardPreferences   UserDashboardPreference[]
  vendors                    Vendor[]                    @relation("VendorExpenses")
  workflowExecutions         WorkflowExecution[]
  workflowTemplates          WorkflowTemplate[]
  workflowTriggers           WorkflowTrigger[]
  deathRegisters             DeathRegister[]

  @@index([organisationId])
}

model UserBranch {
  userId     String
  branchId   String?
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?
  branch     Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([branchId])
  @@index([roleId])
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      String
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailTemplate {
  id             String         @id @default(uuid())
  name           String
  description    String?
  subject        String
  bodyHtml       String
  bodyText       String?
  isActive       Boolean        @default(true)
  branchId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  emails         EmailMessage[]
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])

  @@unique([name, organisationId, branchId], name: "email_template_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model EmailMessage {
  id             String         @id @default(uuid())
  subject        String
  bodyHtml       String
  bodyText       String?
  senderEmail    String
  recipients     String[]
  sentAt         DateTime?
  status         MessageStatus
  branchId       String?
  templateId     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  scheduledAt    DateTime?
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])
  template       EmailTemplate? @relation(fields: [templateId], references: [id])

  @@index([branchId])
  @@index([templateId])
  @@index([organisationId])
}

model SmsMessage {
  id             String        @id @default(uuid())
  body           String
  senderNumber   String
  recipients     String[]
  sentAt         DateTime?
  status         MessageStatus
  branchId       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  scheduledAt    DateTime?
  branch         Branch?       @relation(fields: [branchId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([organisationId])
}

model Notification {
  id             String           @id @default(uuid())
  title          String
  message        String
  memberId       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isRead         Boolean          @default(false)
  link           String?
  readAt         DateTime?
  userId         String
  type           NotificationType
  branchId       String?
  organisationId String?
  scheduledAt    DateTime?
  branch         Branch?          @relation(fields: [branchId], references: [id])
  Member         Member?          @relation(fields: [memberId], references: [id])
  organisation   Organisation?    @relation(fields: [organisationId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([branchId])
  @@index([organisationId])
}

model BranchSetting {
  id                       String   @id @default(uuid())
  branchId                 String
  key                      String?
  value                    String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  allowMemberRegistration  Boolean?
  allowMemberTransfers     Boolean?
  enableAttendanceTracking Boolean?
  enableFinancialReporting Boolean?
  enableSacramentTracking  Boolean?
  enableMinistryManagement Boolean?
  enableEventManagement    Boolean?
  enableSmallGroups        Boolean?
  defaultLanguage          String?
  timeZone                 String?
  dateFormat               String?
  currencyCode             String?
  enableEmailNotifications Boolean?
  enableSmsNotifications   Boolean?
  enablePushNotifications  Boolean?
  notificationEvents       String[]
  branch                   Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
}

model Setting {
  id        String   @id @default(cuid())
  key       String
  value     String
  branchId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch?  @relation("SettingsModuleBranchSpecific", fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([key, branchId], name: "settings_module_key_branchId_unique")
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entityType  String
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  userId      String?
  branchId    String?
  createdAt   DateTime @default(now())
  branch      Branch?  @relation(fields: [branchId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([branchId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

model DataOperation {
  id          String    @id @default(uuid())
  type        String
  status      String
  entityType  String
  description String?
  metadata    Json?
  filePath    String?
  fileSize    Int?
  recordCount Int?
  errorCount  Int?
  errors      Json?
  userId      String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([entityType])
}

model Backup {
  id           String    @id @default(uuid())
  type         String
  status       String
  description  String?
  metadata     Json?
  filePath     String?
  fileSize     Int?
  duration     Int?
  errorDetails Json?
  userId       String?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  user         User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([type])
}

model Member {
  id                       String                     @id @default(uuid())
  firstName                String
  middleName               String?
  lastName                 String
  gender                   Gender                     @default(NOT_SPECIFIED)
  dateOfBirth              DateTime?
  email                    String?                    @unique
  phoneNumber              String?
  address                  String?
  city                     String?
  state                    String?
  postalCode               String?
  country                  String?
  occupation               String?
  employerName             String?
  membershipDate           DateTime?
  membershipStatus         MembershipStatus           @default(VISITOR)
  statusChangeDate         DateTime?
  statusChangeReason       String?
  baptismDate              DateTime?
  baptismLocation          String?
  confirmationDate         DateTime?
  profileImageUrl          String?
  notes                    String?
  customFields             Json?
  privacySettings          Json?
  rfidCardId               String?
  isRegularAttendee        Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  branchId                 String?
  parentId                 String?
  spouseId                 String?                    @unique
  organisationId           String?
  userId                   String?                    @unique
  addressLine2             String?
  affidavitUrl             String?
  alternatePhone           String?
  alternativeEmail         String?
  cardIssued               Boolean                    @default(false)
  cardIssuedAt             DateTime?
  cardType                 String?
  consentDate              DateTime?
  consentVersion           String?
  createdBy                String?
  dataRetentionDate        DateTime?
  deactivatedAt            DateTime?
  deactivatedBy            String?
  deactivationReason       String?
  deletedAt                DateTime?
  deletedBy                String?
  deletionReason           String?
  digitalAddress           String?
  district                 String?
  education                String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  familyId                 String?
  fatherName               String?
  fatherOccupation         String?
  headOfHousehold          Boolean                    @default(false)
  isDeactivated            Boolean                    @default(false)
  landmark                 String?
  lastAttendanceDate       DateTime?
  lastModifiedBy           String?
  memberId                 String?                    @unique
  memberIdGeneratedAt      DateTime?
  membershipType           MembershipType             @default(REGULAR)
  motherName               String?
  motherOccupation         String?
  nationality              String?
  nfcId                    String?
  nlbNumber                String?
  placeOfBirth             String?
  preferredLanguage        String                     @default("en")
  preferredName            String?
  privacyLevel             PrivacyLevel               @default(STANDARD)
  region                   String?
  salvationDate            DateTime?
  title                    String?
  maritalStatus            MaritalStatus              @default(UNKNOWN)
  status                   MemberStatus               @default(ACTIVE)
  attendanceRecords        AttendanceRecord[]
  careRequests             CareRequest[]
  volunteerProfile         ChildrenMinistryVolunteer?
  communicationPrefs       CommunicationPrefs?
  contributions            Contribution[]
  counselingSessions       CounselingSession[]
  eventRSVPs               EventRSVP[]
  eventRegistrations       EventRegistration[]
  familyRelationships      FamilyRelationship[]       @relation("MemberRelationships")
  relatedToMembers         FamilyRelationship[]       @relation("RelatedMemberRelationships")
  followUpReminders        FollowUpReminder[]
  groupMemberships         GroupMember[]
  guardianProfile          Guardian?
  branch                   Branch?                    @relation(fields: [branchId], references: [id])
  organisation             Organisation?              @relation(fields: [organisationId], references: [id])
  parent                   Member?                    @relation("MemberParent", fields: [parentId], references: [id])
  children                 Member[]                   @relation("MemberParent")
  spouse                   Member?                    @relation("MemberSpouse", fields: [spouseId], references: [id])
  spouseOf                 Member?                    @relation("MemberSpouse")
  user                     User?                      @relation("UserToMember", fields: [userId], references: [id])
  memberAnalytics          MemberAnalytics?
  MemberNotification       MemberNotification[]
  memberRelationships      MemberRelationship[]       @relation("PrimaryMember")
  relatedMembers           MemberRelationship[]       @relation("RelatedMember")
  searchIndex              MemberSearchIndex?
  membershipHistory        MembershipHistory[]
  notifications            Notification[]
  pastoralVisits           PastoralVisit[]
  paystackCustomer         PaystackCustomer?
  pledges                  Pledge[]
  prayerRequests           PrayerRequest[]
  sacramentalRecords       SacramentalRecord[]
  speakerProfile           Speaker?                   @relation("MemberSpeaker")
  spiritualMilestones      SpiritualMilestone[]
  transactions             Transaction[]
  transferRequests         TransferRequest[]
  workflowExecutions       WorkflowExecution[]
  families                 Family[]                   @relation("MemberFamilies")
  deathRegister            DeathRegister?

  @@index([branchId])
  @@index([status])
  @@index([membershipDate])
}

model CommunicationPrefs {
  id                String   @id @default(uuid())
  memberId          String   @unique
  emailEnabled      Boolean  @default(true)
  emailNewsletter   Boolean  @default(true)
  emailEvents       Boolean  @default(true)
  emailReminders    Boolean  @default(true)
  emailPrayer       Boolean  @default(true)
  smsEnabled        Boolean  @default(false)
  smsEvents         Boolean  @default(false)
  smsReminders      Boolean  @default(false)
  smsEmergency      Boolean  @default(true)
  phoneCallsEnabled Boolean  @default(true)
  phoneEmergency    Boolean  @default(true)
  physicalMail      Boolean  @default(true)
  pushNotifications Boolean  @default(true)
  preferredCallTime String?
  doNotDisturbDays  String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  member            Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}

model MemberRelationship {
  id                 String           @id @default(uuid())
  primaryMemberId    String
  relatedMemberId    String
  relationshipType   RelationshipType
  isEmergencyContact Boolean          @default(false)
  isGuardian         Boolean          @default(false)
  canPickupChildren  Boolean          @default(false)
  relationshipStart  DateTime?
  relationshipEnd    DateTime?
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  primaryMember      Member           @relation("PrimaryMember", fields: [primaryMemberId], references: [id], onDelete: Cascade)
  relatedMember      Member           @relation("RelatedMember", fields: [relatedMemberId], references: [id], onDelete: Cascade)

  @@unique([primaryMemberId, relatedMemberId, relationshipType])
  @@index([primaryMemberId])
  @@index([relatedMemberId])
  @@index([relationshipType])
}

model MembershipHistory {
  id           String            @id @default(uuid())
  memberId     String
  fromStatus   MembershipStatus?
  toStatus     MembershipStatus
  changeDate   DateTime          @default(now())
  changeReason String?
  fromBranchId String?
  toBranchId   String?
  notes        String?
  approvedBy   String?
  metadata     Json?
  createdAt    DateTime          @default(now())
  approver     User?             @relation(fields: [approvedBy], references: [id])
  fromBranch   Branch?           @relation("FromBranchHistory", fields: [fromBranchId], references: [id])
  member       Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  toBranch     Branch?           @relation("ToBranchHistory", fields: [toBranchId], references: [id])

  @@index([memberId])
  @@index([changeDate])
  @@index([toStatus])
}

model MemberSearchIndex {
  id           String   @id @default(uuid())
  memberId     String   @unique
  fullName     String
  searchName   String
  phoneNumbers String[]
  emails       String[]
  addresses    String[]
  tags         String[]
  lastUpdated  DateTime @default(now())
  searchRank   Float    @default(1.0)
  member       Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([searchName])
  @@index([fullName])
  @@index([phoneNumbers])
  @@index([emails])
}

model MemberAnalytics {
  id                    String    @id @default(uuid())
  memberId              String    @unique
  totalAttendances      Int       @default(0)
  attendanceRate        Float     @default(0.0)
  lastAttendanceDate    DateTime?
  attendanceStreak      Int       @default(0)
  totalContributions    Float     @default(0)
  lastContributionDate  DateTime?
  contributionFrequency String?
  engagementScore       Float     @default(0.0)
  engagementLevel       String    @default("NEW")
  ministriesCount       Int       @default(0)
  leadershipRoles       Int       @default(0)
  volunteerHours        Float     @default(0)
  emailOpenRate         Float     @default(0.0)
  smsResponseRate       Float     @default(0.0)
  lastCommunication     DateTime?
  membershipDuration    Int?
  ageGroup              String?
  lastCalculated        DateTime  @default(now())
  member                Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([engagementLevel])
  @@index([ageGroup])
  @@index([lastAttendanceDate])
}

model SpiritualMilestone {
  id                String   @id @default(uuid())
  type              String
  date              DateTime
  location          String?
  performedBy       String?
  description       String?
  additionalDetails Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  memberId          String
  member            Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([type])
  @@index([date])
}

model Family {
  id            String               @id @default(uuid())
  name          String
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  phoneNumber   String?
  customFields  Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  relationships FamilyRelationship[]
  members       Member[]             @relation("MemberFamilies")

  @@index([name])
}

model FamilyRelationship {
  id               String   @id @default(uuid())
  relationshipType String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  memberId         String
  relatedMemberId  String
  familyId         String?
  family           Family?  @relation(fields: [familyId], references: [id])
  member           Member   @relation("MemberRelationships", fields: [memberId], references: [id], onDelete: Cascade)
  relatedMember    Member   @relation("RelatedMemberRelationships", fields: [relatedMemberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([relatedMemberId])
  @@index([familyId])
  @@index([relationshipType])
}

model License {
  id               String   @id
  key              String   @unique
  type             String
  status           String
  startDate        DateTime
  expiryDate       DateTime
  organizationName String?
  contactEmail     String?
  contactPhone     String?
  features         Json?
  maxUsers         Int?
  maxBranches      Int?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime

  @@index([expiryDate])
  @@index([key])
  @@index([status])
  @@index([type])
}

model Ministry {
  id             String        @id @default(uuid())
  name           String
  description    String?
  type           String
  status         String
  branchId       String?
  parentId       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  budgets        Budget[]
  members        GroupMember[]
  branch         Branch?       @relation(fields: [branchId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  parent         Ministry?     @relation("SubMinistries", fields: [parentId], references: [id])
  subMinistries  Ministry[]    @relation("SubMinistries")
  smallGroups    SmallGroup[]

  @@index([branchId])
  @@index([organisationId])
  @@index([parentId])
  @@index([type])
  @@index([status])
}

model SmallGroup {
  id              String        @id @default(uuid())
  name            String
  description     String?
  type            String
  meetingSchedule String?
  location        String?
  maximumCapacity Int?
  status          String
  branchId        String?
  ministryId      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organisationId  String?
  members         GroupMember[]
  branch          Branch?       @relation(fields: [branchId], references: [id])
  ministry        Ministry?     @relation(fields: [ministryId], references: [id])
  organisation    Organisation? @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([ministryId])
  @@index([type])
  @@index([status])
}

model GroupMember {
  id           String      @id @default(uuid())
  role         String
  joinDate     DateTime    @default(now())
  status       String
  memberId     String
  ministryId   String?
  smallGroupId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  member       Member      @relation(fields: [memberId], references: [id])
  ministry     Ministry?   @relation(fields: [ministryId], references: [id])
  smallGroup   SmallGroup? @relation(fields: [smallGroupId], references: [id])

  @@unique([memberId, ministryId, smallGroupId])
  @@index([memberId])
  @@index([ministryId])
  @@index([smallGroupId])
  @@index([role])
  @@index([status])
}

model AttendanceSession {
  id                String             @id @default(uuid())
  name              String
  description       String?
  date              DateTime
  startTime         DateTime
  endTime           DateTime?
  type              String
  status            String             @default("PLANNED")
  location          String?
  latitude          Float?
  longitude         Float?
  branchId          String?
  organisationId    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]
  branch            Branch?            @relation(fields: [branchId], references: [id])
  organisation      Organisation?      @relation(fields: [organisationId], references: [id])
  qrCodeTokens      QRCodeToken[]

  @@index([branchId])
  @@index([organisationId])
  @@index([date])
  @@index([type])
  @@index([status])
}

model AttendanceRecord {
  id             String             @id @default(uuid())
  checkInTime    DateTime
  checkOutTime   DateTime?
  checkInMethod  String             @default("MANUAL")
  notes          String?
  sessionId      String?
  memberId       String?
  visitorName    String?
  visitorEmail   String?
  visitorPhone   String?
  recordedById   String?
  branchId       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organisationId String
  eventId        String?
  branch         Branch?            @relation("BranchAttendanceRecords", fields: [branchId], references: [id])
  event          Event?             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member         Member?            @relation(fields: [memberId], references: [id])
  organisation   Organisation       @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  recordedBy     User?              @relation("UserAttendanceRecords", fields: [recordedById], references: [id])
  session        AttendanceSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([eventId])
  @@index([memberId])
  @@index([branchId])
  @@index([checkInTime])
  @@index([checkInMethod])
}

model QRCodeToken {
  id        String            @id @default(uuid())
  token     String            @unique
  sessionId String
  expiresAt DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  session   AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([token])
  @@index([expiresAt])
}

model MemberNotification {
  id        String    @id @default(uuid())
  type      String
  title     String
  message   String
  status    String    @default("PENDING")
  channel   String    @default("EMAIL")
  memberId  String
  metadata  Json?
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model SacramentalRecord {
  id                  String        @id @default(uuid())
  memberId            String
  sacramentType       SacramentType
  dateOfSacrament     DateTime
  locationOfSacrament String
  officiantName       String
  officiantId         String?
  godparent1Name      String?
  godparent2Name      String?
  sponsorName         String?
  witness1Name        String?
  witness2Name        String?
  certificateNumber   String?       @unique
  certificateUrl      String?
  notes               String?
  branchId            String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  organisationId      String?
  branch              Branch        @relation(fields: [branchId], references: [id])
  member              Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  organisation        Organisation? @relation(fields: [organisationId], references: [id])

  @@index([memberId])
  @@index([branchId])
  @@index([organisationId])
  @@index([sacramentType])
  @@index([dateOfSacrament])
  @@index([certificateNumber])
}

model Fund {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean        @default(true)
  branchId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  budgets        Budget[]
  contributions  Contribution[]
  expenses       Expense[]
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])
  pledges        Pledge[]
  transactions   Transaction[]  @relation("FundTransactions")

  @@unique([name, organisationId, branchId], name: "fund_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model ContributionType {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean        @default(true)
  branchId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  contributions  Contribution[]
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])

  @@unique([name, organisationId, branchId], name: "contribution_type_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model PaymentMethod {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean        @default(true)
  branchId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  contributions  Contribution[]
  expenses       Expense[]
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])

  @@unique([name, organisationId, branchId], name: "payment_method_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model Contribution {
  id                 String           @id @default(uuid())
  amount             Float
  date               DateTime
  notes              String?
  receiptNumber      String?
  isAnonymous        Boolean          @default(false)
  contributionTypeId String
  fundId             String
  paymentMethodId    String
  memberId           String?
  donorName          String?
  donorEmail         String?
  donorPhone         String?
  donorAddress       String?
  batchId            String?
  pledgeId           String?
  transactionId      String?          @unique
  transactionStatus  String?
  paymentGateway     String?
  branchId           String?
  createdById        String?
  updatedById        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organisationId     String?
  batch              Batch?           @relation(fields: [batchId], references: [id])
  branch             Branch?          @relation(fields: [branchId], references: [id])
  contributionType   ContributionType @relation(fields: [contributionTypeId], references: [id])
  fund               Fund             @relation(fields: [fundId], references: [id])
  member             Member?          @relation(fields: [memberId], references: [id])
  organisation       Organisation?    @relation(fields: [organisationId], references: [id])
  paymentMethod      PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  pledge             Pledge?          @relation(fields: [pledgeId], references: [id])

  @@index([contributionTypeId])
  @@index([fundId])
  @@index([paymentMethodId])
  @@index([memberId])
  @@index([batchId])
  @@index([pledgeId])
  @@index([branchId])
  @@index([organisationId])
  @@index([date])
  @@index([transactionId])
}

model Batch {
  id             String         @id @default(uuid())
  name           String
  date           DateTime
  notes          String?
  status         String
  totalAmount    Float
  branchId       String?
  createdById    String?
  updatedById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organisationId String?
  branch         Branch?        @relation(fields: [branchId], references: [id])
  organisation   Organisation?  @relation(fields: [organisationId], references: [id])
  contributions  Contribution[]

  @@index([branchId])
  @@index([organisationId])
  @@index([date])
  @@index([status])
}

model Pledge {
  id              String         @id @default(uuid())
  amount          Float
  startDate       DateTime
  endDate         DateTime?
  frequency       String
  status          String
  notes           String?
  memberId        String
  fundId          String
  branchId        String?
  amountFulfilled Float          @default(0)
  createdById     String?
  updatedById     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  organisationId  String?
  contributions   Contribution[]
  branch          Branch?        @relation(fields: [branchId], references: [id])
  fund            Fund           @relation(fields: [fundId], references: [id])
  member          Member         @relation(fields: [memberId], references: [id])
  organisation    Organisation?  @relation(fields: [organisationId], references: [id])

  @@index([memberId])
  @@index([fundId])
  @@index([branchId])
  @@index([organisationId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model ExpenseCategory {
  id             String            @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean           @default(true)
  branchId       String?
  parentId       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organisationId String?
  budgetItems    BudgetItem[]
  expenses       Expense[]         @relation("CategoryExpenses")
  branch         Branch?           @relation(fields: [branchId], references: [id])
  organisation   Organisation?     @relation(fields: [organisationId], references: [id])
  parent         ExpenseCategory?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories  ExpenseCategory[] @relation("SubCategories")

  @@unique([name, organisationId, branchId], name: "expense_category_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
  @@index([parentId])
}

model Expense {
  id                String          @id @default(uuid())
  amount            Float
  date              DateTime
  description       String
  receiptNumber     String?
  invoiceNumber     String?
  expenseCategoryId String
  fundId            String
  paymentMethodId   String
  vendorId          String?
  vendorName        String?
  vendorContact     String?
  branchId          String?
  budgetId          String?
  createdById       String?
  updatedById       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  organisationId    String?
  branch            Branch?         @relation(fields: [branchId], references: [id])
  budget            Budget?         @relation(fields: [budgetId], references: [id])
  expenseCategory   ExpenseCategory @relation("CategoryExpenses", fields: [expenseCategoryId], references: [id])
  fund              Fund            @relation(fields: [fundId], references: [id])
  organisation      Organisation?   @relation(fields: [organisationId], references: [id])
  paymentMethod     PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  vendor            Vendor?         @relation("VendorExpenses", fields: [vendorId], references: [id])

  @@index([expenseCategoryId])
  @@index([fundId])
  @@index([paymentMethodId])
  @@index([vendorId])
  @@index([branchId])
  @@index([organisationId])
  @@index([budgetId])
  @@index([date])
}

model Vendor {
  id             String        @id @default(uuid())
  name           String
  contactName    String?
  email          String?
  phone          String
  address        String?
  website        String?
  notes          String?
  isActive       Boolean       @default(true)
  branchId       String?
  organisationId String?
  expenses       Expense[]     @relation("VendorExpenses")
  branch         Branch?       @relation("VendorExpenses", fields: [branchId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])

  @@unique([name, organisationId, branchId], name: "vendor_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model Budget {
  id             String        @id @default(uuid())
  name           String
  description    String?
  fiscalYear     Int
  startDate      DateTime
  endDate        DateTime
  totalAmount    Float
  totalSpent     Float         @default(0)
  status         String
  notes          String?
  fundId         String
  ministryId     String?
  branchId       String?
  createdById    String?
  updatedById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  branch         Branch?       @relation(fields: [branchId], references: [id])
  fund           Fund          @relation(fields: [fundId], references: [id])
  ministry       Ministry?     @relation(fields: [ministryId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  budgetItems    BudgetItem[]
  expenses       Expense[]

  @@index([fundId])
  @@index([ministryId])
  @@index([branchId])
  @@index([organisationId])
  @@index([fiscalYear])
  @@index([status])
}

model BudgetItem {
  id                String           @id @default(uuid())
  name              String
  description       String?
  amount            Float
  budgetId          String
  expenseCategoryId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  budget            Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  expenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])

  @@index([budgetId])
  @@index([expenseCategoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sermons   Sermon[]
}

model Sermon {
  id             String        @id @default(uuid())
  title          String
  description    String?
  datePreached   DateTime
  speakerId      String
  seriesId       String?
  mainScripture  String?
  audioUrl       String?
  videoUrl       String?
  transcriptUrl  String?
  transcriptText String?
  duration       Int?
  branchId       String
  status         ContentStatus @default(DRAFT)
  viewCount      Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  notesUrl       String?
  categoryId     String?
  branch         Branch        @relation(fields: [branchId], references: [id])
  category       Category?     @relation(fields: [categoryId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  series         Series?       @relation(fields: [seriesId], references: [id])
  speaker        Speaker       @relation(fields: [speakerId], references: [id])
  attachments    MediaItem[]   @relation("SermonAttachments")
  tags           Tag[]         @relation("SermonTags")

  @@unique([title, organisationId, branchId], name: "sermon_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
  @@index([speakerId])
  @@index([seriesId])
  @@index([status])
  @@index([datePreached])
  @@index([categoryId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sermons   Sermon[] @relation("SermonTags")

  @@index([name])
}

model Speaker {
  id             String        @id @default(uuid())
  name           String
  bio            String?
  memberId       String?       @unique
  branchId       String?
  imageUrl       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  sermons        Sermon[]
  branch         Branch?       @relation(fields: [branchId], references: [id])
  member         Member?       @relation("MemberSpeaker", fields: [memberId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])

  @@unique([name, organisationId, branchId], name: "speaker_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
  @@index([memberId])
}

model Series {
  id             String        @id @default(uuid())
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  artworkUrl     String?
  branchId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  branch         Branch        @relation(fields: [branchId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  sermons        Sermon[]

  @@unique([title, organisationId, branchId], name: "series_unique_constraint")
  @@index([branchId])
  @@index([organisationId])
}

model MediaItem {
  id             String        @id @default(uuid())
  title          String
  description    String?
  fileUrl        String
  mimeType       String
  fileSize       Int
  type           MediaType
  branchId       String
  uploadedBy     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  branch         Branch        @relation(fields: [branchId], references: [id])
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  sermons        Sermon[]      @relation("SermonAttachments")

  @@index([branchId])
  @@index([organisationId])
  @@index([type])
}

model Child {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                String?
  allergies             String?
  specialNeeds          String?
  emergencyContactName  String
  emergencyContactPhone String
  photoConsent          Boolean                 @default(false)
  notes                 String?
  branchId              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  organisationId        String?
  checkInRecords        CheckInRecord[]
  branch                Branch                  @relation(fields: [branchId], references: [id])
  organisation          Organisation?           @relation(fields: [organisationId], references: [id])
  guardianRelations     ChildGuardianRelation[]

  @@index([branchId])
  @@index([organisationId])
}

model Guardian {
  id                 String                  @id @default(uuid())
  memberId           String?                 @unique
  firstName          String?
  lastName           String?
  relationship       String
  isPrimaryGuardian  Boolean                 @default(false)
  canPickup          Boolean                 @default(true)
  phone              String
  email              String?
  address            String?
  notes              String?
  branchId           String
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  organisationId     String?
  checkInsPerformed  CheckInRecord[]         @relation("CheckedInBy")
  checkOutsPerformed CheckInRecord[]         @relation("CheckedOutBy")
  childRelations     ChildGuardianRelation[]
  branch             Branch                  @relation(fields: [branchId], references: [id])
  member             Member?                 @relation(fields: [memberId], references: [id])
  organisation       Organisation?           @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([organisationId])
  @@index([memberId])
}

model ChildGuardianRelation {
  id           String   @id @default(uuid())
  childId      String
  guardianId   String
  relationship String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  child        Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  guardian     Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)

  @@unique([childId, guardianId])
  @@index([childId])
  @@index([guardianId])
}

model CheckInRecord {
  id                   String         @id @default(uuid())
  childId              String
  eventId              String?
  checkedInById        String
  checkedInAt          DateTime       @default(now())
  checkedOutById       String?
  checkedOutAt         DateTime?
  guardianIdAtCheckIn  String
  guardianIdAtCheckOut String?
  notes                String?
  branchId             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  organisationId       String?
  branch               Branch         @relation(fields: [branchId], references: [id])
  checkedInBy          Guardian       @relation("CheckedInBy", fields: [checkedInById], references: [id])
  checkedOutBy         Guardian?      @relation("CheckedOutBy", fields: [checkedOutById], references: [id])
  child                Child          @relation(fields: [childId], references: [id])
  event                ChildrenEvent? @relation(fields: [eventId], references: [id])
  organisation         Organisation?  @relation(fields: [organisationId], references: [id])

  @@index([childId])
  @@index([eventId])
  @@index([branchId])
  @@index([organisationId])
}

model ChildrenMinistryVolunteer {
  id                    String                     @id @default(uuid())
  memberId              String                     @unique
  role                  String
  backgroundCheckStatus String                     @default("PENDING")
  branchId              String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  organisationId        String?
  trainingCompleted     Boolean                    @default(false)
  branch                Branch?                    @relation(fields: [branchId], references: [id])
  member                Member                     @relation(fields: [memberId], references: [id])
  organisation          Organisation?              @relation(fields: [organisationId], references: [id])
  eventAssignments      VolunteerEventAssignment[]

  @@unique([memberId, organisationId, branchId], name: "children_ministry_volunteer_unique_constraint")
  @@index([memberId])
  @@index([organisationId])
  @@index([branchId])
}

model ChildrenEvent {
  id                   String                     @id @default(uuid())
  name                 String
  description          String?
  startDateTime        DateTime
  endDateTime          DateTime
  location             String
  ageRange             String?
  capacity             Int?
  volunteersNeeded     Int?
  branchId             String
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  organisationId       String?
  checkInRecords       CheckInRecord[]
  branch               Branch                     @relation(fields: [branchId], references: [id])
  organisation         Organisation?              @relation(fields: [organisationId], references: [id])
  volunteerAssignments VolunteerEventAssignment[]

  @@index([branchId])
  @@index([organisationId])
}

model VolunteerEventAssignment {
  id          String                    @id @default(uuid())
  volunteerId String
  eventId     String
  role        String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  event       ChildrenEvent             @relation(fields: [eventId], references: [id])
  volunteer   ChildrenMinistryVolunteer @relation(fields: [volunteerId], references: [id])

  @@unique([volunteerId, eventId])
  @@index([volunteerId])
  @@index([eventId])
}

model Form {
  id              String           @id @default(uuid())
  title           String
  description     String?
  status          FormStatus       @default(DRAFT)
  isPublic        Boolean          @default(false)
  slug            String           @unique
  successMessage  String?
  redirectUrl     String?
  enableCaptcha   Boolean          @default(false)
  notifyEmails    String[]
  branchId        String?
  createdById     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiresAt       DateTime?
  submissionCount Int              @default(0)
  organisationId  String?
  branch          Branch?          @relation(fields: [branchId], references: [id])
  organisation    Organisation?    @relation(fields: [organisationId], references: [id])
  fields          FormField[]
  submissions     FormSubmission[]

  @@index([branchId])
  @@index([organisationId])
  @@index([status])
  @@index([createdAt])
}

model FormField {
  id               String           @id @default(uuid())
  formId           String
  type             FormFieldType
  label            String
  placeholder      String?
  helpText         String?
  defaultValue     String?
  options          Json?
  isRequired       Boolean          @default(false)
  isUnique         Boolean          @default(false)
  validations      Json?
  order            Int
  width            Int              @default(100)
  conditionalLogic Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  form             Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  fieldValues      FormFieldValue[]

  @@index([formId])
  @@index([type])
}

model FormSubmission {
  id             String           @id @default(uuid())
  formId         String
  submittedAt    DateTime         @default(now())
  ipAddress      String?
  userAgent      String?
  status         String           @default("COMPLETED")
  branchId       String?
  submittedById  String?
  organisationId String?
  fieldValues    FormFieldValue[]
  branch         Branch?          @relation(fields: [branchId], references: [id])
  form           Form             @relation(fields: [formId], references: [id])
  organisation   Organisation?    @relation(fields: [organisationId], references: [id])

  @@index([formId])
  @@index([submittedAt])
  @@index([branchId])
  @@index([organisationId])
}

model FormFieldValue {
  id           String         @id @default(uuid())
  submissionId String
  fieldId      String
  value        String?
  fileUrl      String?
  createdAt    DateTime       @default(now())
  field        FormField      @relation(fields: [fieldId], references: [id])
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([fieldId])
}

model ScheduledReport {
  id              String              @id @default(uuid())
  name            String
  reportType      String
  frequency       ReportFrequencyEnum
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  recipientEmails String[]
  outputFormat    String
  branchId        String?
  filterJson      String?
  isActive        Boolean             @default(true)
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  organisationId  String?
  branch          Branch?             @relation(fields: [branchId], references: [id])
  createdBy       User                @relation("UserCreatedReports", fields: [createdById], references: [id])
  organisation    Organisation?       @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([organisationId])
  @@index([createdById])
  @@index([frequency])
  @@index([nextRunAt])
}

model UserDashboardPreference {
  id             String        @id @default(uuid())
  userId         String
  branchId       String
  dashboardType  String
  layoutConfig   Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisationId String?
  branch         Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId, dashboardType])
  @@index([userId])
  @@index([branchId])
  @@index([organisationId])
}

model OnboardingProgress {
  id               String           @id @default(uuid())
  branchId         String           @unique
  completedSteps   OnboardingStep[]
  currentStep      OnboardingStep
  isCompleted      Boolean          @default(false)
  importedMembers  Boolean          @default(false)
  importedFinances Boolean          @default(false)
  startedAt        DateTime         @default(now())
  completedAt      DateTime?
  lastUpdatedAt    DateTime         @updatedAt
  selectedModules  String[]         @default([])
  organisationId   String?          @unique
  branch           Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  organisation     Organisation?    @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([organisationId])
}

model Organisation {
  id                         String                      @id @default(uuid())
  name                       String
  email                      String?                     @unique
  phoneNumber                String?
  website                    String?
  address                    String?
  city                       String?
  state                      String?
  country                    String?
  zipCode                    String?
  denomination               String?
  foundingYear               Int?
  size                       String?
  vision                     String?
  missionStatement           String?
  description                String?
  timezone                   String?
  currency                   String?
  primaryColor               String
  secondaryColor             String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  accentColor                String?
  brandFont                  String?
  faviconUrl                 String?
  logoUrl                    String?
  slogan                     String?
  socialHandle               String?
  status                     OrganisationStatus          @default(ACTIVE)
  suspendedAt                DateTime?
  suspendedBy                String?
  suspensionReason           String?
  attendanceRecords          AttendanceRecord[]
  attendanceSessions         AttendanceSession[]
  Batch                      Batch[]
  branches                   Branch[]
  budgets                    Budget[]
  careRequests               CareRequest[]
  checkInRecords             CheckInRecord[]
  children                   Child[]
  childrenEvents             ChildrenEvent[]
  childrenMinistryVolunteers ChildrenMinistryVolunteer[]
  contributions              Contribution[]
  ContributionType           ContributionType[]
  counselingSessions         CounselingSession[]
  emailMessages              EmailMessage[]
  emailTemplates             EmailTemplate[]
  events                     Event[]
  expenses                   Expense[]
  expenseCategories          ExpenseCategory[]
  followUpReminders          FollowUpReminder[]
  forms                      Form[]
  formSubmissions            FormSubmission[]
  funds                      Fund[]
  guardians                  Guardian[]
  mediaItems                 MediaItem[]
  members                    Member[]
  memberIdConfigs            MemberIdConfig?
  memberIdSequences          MemberIdSequence[]
  ministries                 Ministry[]
  notifications              Notification[]
  onboardingProgress         OnboardingProgress?
  suspendedByUser            User?                       @relation("OrganizationSuspendedBy", fields: [suspendedBy], references: [id])
  pastoralVisits             PastoralVisit[]
  PaymentMethod              PaymentMethod[]
  pledges                    Pledge[]
  prayerRequests             PrayerRequest[]
  sacramentalRecords         SacramentalRecord[]
  scheduledReports           ScheduledReport[]
  series                     Series[]
  sermons                    Sermon[]
  smallGroups                SmallGroup[]
  smsMessages                SmsMessage[]
  speakers                   Speaker[]
  subscriptionsAsCustomer    Subscription[]              @relation("SubscriptionCustomer")
  subscriptions              Subscription[]              @relation("SubscriptionOrganisation")
  transactions               Transaction[]               @relation("OrganisationTransactions")
  users                      User[]
  userDashboardPreferences   UserDashboardPreference[]
  vendors                    Vendor[]
  webhookEvents              WebhookEvent[]
  workflowExecutions         WorkflowExecution[]
  workflowTemplates          WorkflowTemplate[]
  workflowTriggers           WorkflowTrigger[]
  deathRegisters             DeathRegister[]

  @@index([email])
}

model Event {
  id                   String              @id @default(uuid())
  title                String
  description          String?
  startDate            DateTime
  endDate              DateTime?
  location             String?
  category             String?
  branchId             String?
  createdBy            String?
  updatedBy            String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  organisationId       String?
  capacity             Int?
  currency             String?             @default("GHS")
  eventImageUrl        String?
  eventType            EventType           @default(OTHER)
  isFree               Boolean             @default(true)
  isPublic             Boolean             @default(true)
  organizerEmail       String?
  organizerName        String?
  organizerPhone       String?
  registrationDeadline DateTime?
  registrationRequired Boolean             @default(false)
  requiresApproval     Boolean             @default(false)
  status               EventStatus         @default(DRAFT)
  tags                 String[]
  ticketPrice          Decimal?            @db.Decimal(10, 2)
  attendanceRecords    AttendanceRecord[]
  branch               Branch?             @relation("BranchEvents", fields: [branchId], references: [id])
  creator              User?               @relation("EventCreatedBy", fields: [createdBy], references: [id])
  organisation         Organisation?       @relation(fields: [organisationId], references: [id])
  updater              User?               @relation("EventUpdatedBy", fields: [updatedBy], references: [id])
  eventRSVPs           EventRSVP[]
  eventRegistrations   EventRegistration[]
  transactions         Transaction[]
  workflowExecutions   WorkflowExecution[]
  funeralDeathRegisters DeathRegister[]    @relation("DeathRegisterFuneralEvent")

  @@index([branchId])
  @@index([organisationId])
  @@index([eventType])
  @@index([status])
  @@index([startDate])
}

model EventRegistration {
  id                 String     @id @default(uuid())
  eventId            String
  memberId           String?
  guestName          String?
  guestEmail         String?
  guestPhone         String?
  registrationDate   DateTime   @default(now())
  status             RSVPStatus @default(PENDING)
  numberOfGuests     Int        @default(0)
  specialRequests    String?
  amountPaid         Decimal?   @db.Decimal(10, 2)
  paymentStatus      String?
  paymentMethod      String?
  transactionId      String?
  approvalStatus     String?
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  registrationSource String?
  notes              String?
  createdBy          String?
  updatedBy          String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  event              Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member             Member?    @relation(fields: [memberId], references: [id])

  @@unique([eventId, memberId])
  @@unique([eventId, guestEmail])
  @@index([eventId])
  @@index([memberId])
  @@index([status])
}

model EventRSVP {
  id             String     @id @default(uuid())
  eventId        String
  memberId       String?
  guestName      String?
  guestEmail     String?
  status         RSVPStatus @default(PENDING)
  responseDate   DateTime   @default(now())
  numberOfGuests Int        @default(0)
  message        String?
  rsvpSource     String?
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member         Member?    @relation(fields: [memberId], references: [id])

  @@unique([eventId, memberId])
  @@unique([eventId, guestEmail])
  @@index([eventId])
  @@index([memberId])
  @@index([status])
}

model PrayerRequest {
  id               String              @id @default(uuid())
  memberId         String
  branchId         String
  requestText      String
  status           PrayerRequestStatus @default(NEW)
  assignedPastorId String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  organisationId   String?
  assignedPastor   User?               @relation("AssignedPrayerRequests", fields: [assignedPastorId], references: [id])
  branch           Branch              @relation(fields: [branchId], references: [id])
  member           Member              @relation(fields: [memberId], references: [id])
  organisation     Organisation?       @relation(fields: [organisationId], references: [id])

  @@index([branchId])
  @@index([memberId])
  @@index([assignedPastorId])
  @@index([organisationId])
  @@index([status])
}

model VolunteerRole {
  id String @id @default(uuid())
}

model Transaction {
  id             String          @id @default(uuid())
  organisationId String
  branchId       String?
  fundId         String?
  userId         String?
  type           TransactionType
  amount         Decimal
  date           DateTime        @default(now())
  description    String?
  reference      String?
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memberId       String?
  eventId        String?
  branch         Branch?         @relation("BranchTransactions", fields: [branchId], references: [id])
  event          Event?          @relation(fields: [eventId], references: [id])
  fund           Fund?           @relation("FundTransactions", fields: [fundId], references: [id])
  member         Member?         @relation(fields: [memberId], references: [id])
  organisation   Organisation    @relation("OrganisationTransactions", fields: [organisationId], references: [id])
  user           User?           @relation("UserTransactions", fields: [userId], references: [id])

  @@index([organisationId])
  @@index([branchId])
  @@index([fundId])
  @@index([userId])
  @@index([memberId])
  @@index([eventId])
  @@index([type])
  @@index([date])
}

model TransferRequest {
  id                    String    @id @default(uuid())
  memberId              String
  memberName            String
  sourceBranchId        String
  sourceBranchName      String
  destinationBranchId   String
  destinationBranchName String
  requestDate           DateTime
  reason                String
  transferData          String[]
  approvedDate          DateTime?
  rejectedDate          DateTime?
  rejectionReason       String?
  completedDate         DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  status                String    @default("pending")
  destinationBranch     Branch    @relation("DestinationBranchTransfers", fields: [destinationBranchId], references: [id])
  member                Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  sourceBranch          Branch    @relation("SourceBranchTransfers", fields: [sourceBranchId], references: [id])

  @@index([memberId])
  @@index([sourceBranchId])
  @@index([destinationBranchId])
  @@index([status])
  @@index([requestDate])
}

model WorkflowTemplate {
  id             String              @id @default(uuid())
  name           String
  description    String?
  type           WorkflowType
  status         WorkflowStatus      @default(ACTIVE)
  triggerType    WorkflowTriggerType
  triggerConfig  Json?
  organisationId String
  branchId       String?
  createdBy      String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  actions        WorkflowAction[]
  executions     WorkflowExecution[]
  branch         Branch?             @relation(fields: [branchId], references: [id])
  creator        User                @relation(fields: [createdBy], references: [id])
  organisation   Organisation        @relation(fields: [organisationId], references: [id])
  triggers       WorkflowTrigger[]

  @@index([organisationId])
  @@index([branchId])
  @@index([type])
  @@index([status])
  @@index([triggerType])
}

model WorkflowAction {
  id           String                    @id @default(uuid())
  workflowId   String
  stepNumber   Int
  actionType   WorkflowActionType
  actionConfig Json
  delayMinutes Int?
  conditions   Json?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  workflow     WorkflowTemplate          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executions   WorkflowActionExecution[]

  @@index([workflowId])
  @@index([stepNumber])
}

model WorkflowExecution {
  id               String                    @id @default(uuid())
  workflowId       String
  status           WorkflowExecutionStatus   @default(PENDING)
  triggeredBy      String?
  triggerData      Json?
  targetMemberId   String?
  targetEventId    String?
  targetData       Json?
  startedAt        DateTime?
  completedAt      DateTime?
  errorMessage     String?
  organisationId   String
  branchId         String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  actionExecutions WorkflowActionExecution[]
  branch           Branch?                   @relation(fields: [branchId], references: [id])
  organisation     Organisation              @relation(fields: [organisationId], references: [id])
  targetEvent      Event?                    @relation(fields: [targetEventId], references: [id])
  targetMember     Member?                   @relation(fields: [targetMemberId], references: [id])
  triggeredByUser  User?                     @relation(fields: [triggeredBy], references: [id])
  workflow         WorkflowTemplate          @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
  @@index([status])
  @@index([organisationId])
  @@index([branchId])
  @@index([targetMemberId])
  @@index([targetEventId])
  @@index([startedAt])
}

model WorkflowActionExecution {
  id           String                  @id @default(uuid())
  executionId  String
  actionId     String
  status       WorkflowExecutionStatus @default(PENDING)
  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?
  result       Json?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  action       WorkflowAction          @relation(fields: [actionId], references: [id])
  execution    WorkflowExecution       @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([actionId])
  @@index([status])
}

model WorkflowTrigger {
  id              String              @id @default(uuid())
  workflowId      String
  triggerType     WorkflowTriggerType
  triggerConfig   Json
  cronExpression  String?
  nextRunAt       DateTime?
  isActive        Boolean             @default(true)
  lastTriggeredAt DateTime?
  organisationId  String
  branchId        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  branch          Branch?             @relation(fields: [branchId], references: [id])
  organisation    Organisation        @relation(fields: [organisationId], references: [id])
  workflow        WorkflowTemplate    @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([triggerType])
  @@index([organisationId])
  @@index([branchId])
  @@index([nextRunAt])
  @@index([isActive])
}

model PastoralVisit {
  id                  String              @id @default(uuid())
  title               String
  description         String?
  visitType           PastoralVisitType
  status              PastoralVisitStatus @default(SCHEDULED)
  scheduledDate       DateTime
  actualDate          DateTime?
  duration            Int?
  location            String?
  memberId            String
  pastorId            String
  additionalAttendees String?
  notes               String?
  privateNotes        String?
  actionItems         String?
  followUpNeeded      Boolean             @default(false)
  followUpDate        DateTime?
  organisationId      String
  branchId            String?
  createdBy           String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  followUpReminders   FollowUpReminder[]
  branch              Branch?             @relation(fields: [branchId], references: [id])
  creator             User                @relation("PastoralVisitCreator", fields: [createdBy], references: [id])
  member              Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  organisation        Organisation        @relation(fields: [organisationId], references: [id])
  pastor              User                @relation("PastoralVisitPastor", fields: [pastorId], references: [id])

  @@index([memberId])
  @@index([pastorId])
  @@index([organisationId])
  @@index([branchId])
  @@index([status])
  @@index([visitType])
  @@index([scheduledDate])
}

model CounselingSession {
  id                String                  @id @default(uuid())
  title             String
  description       String?
  sessionType       CounselingSessionType
  status            CounselingSessionStatus @default(SCHEDULED)
  scheduledDate     DateTime
  actualDate        DateTime?
  duration          Int?
  location          String?
  isRecurring       Boolean                 @default(false)
  recurringPattern  String?
  primaryMemberId   String
  counselorId       String
  additionalMembers String?
  sessionNotes      String?
  privateNotes      String?
  homework          String?
  nextSteps         String?
  sessionNumber     Int                     @default(1)
  totalSessions     Int?
  progressNotes     String?
  organisationId    String
  branchId          String?
  createdBy         String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  branch            Branch?                 @relation(fields: [branchId], references: [id])
  counselor         User                    @relation("CounselingSessionCounselor", fields: [counselorId], references: [id])
  creator           User                    @relation("CounselingSessionCreator", fields: [createdBy], references: [id])
  organisation      Organisation            @relation(fields: [organisationId], references: [id])
  primaryMember     Member                  @relation(fields: [primaryMemberId], references: [id])
  followUpReminders FollowUpReminder[]

  @@index([primaryMemberId])
  @@index([counselorId])
  @@index([organisationId])
  @@index([branchId])
  @@index([status])
  @@index([sessionType])
  @@index([scheduledDate])
}

model CareRequest {
  id                     String              @id @default(uuid())
  title                  String
  description            String
  requestType            CareRequestType
  priority               CareRequestPriority @default(MEDIUM)
  status                 CareRequestStatus   @default(SUBMITTED)
  urgentNotes            String?
  contactInfo            String?
  preferredContactMethod String?
  requesterId            String?
  assignedPastorId       String?
  assignedDate           DateTime?
  requestDate            DateTime            @default(now())
  responseDate           DateTime?
  completionDate         DateTime?
  responseNotes          String?
  resolutionNotes        String?
  actionsTaken           String?
  organisationId         String
  branchId               String?
  createdBy              String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  assignedPastor         User?               @relation("CareRequestAssignedPastor", fields: [assignedPastorId], references: [id])
  branch                 Branch?             @relation(fields: [branchId], references: [id])
  creator                User                @relation("CareRequestCreator", fields: [createdBy], references: [id])
  organisation           Organisation        @relation(fields: [organisationId], references: [id])
  requester              Member?             @relation(fields: [requesterId], references: [id])
  followUpReminders      FollowUpReminder[]

  @@index([requesterId])
  @@index([assignedPastorId])
  @@index([organisationId])
  @@index([branchId])
  @@index([status])
  @@index([priority])
  @@index([requestType])
  @@index([requestDate])
}

model FollowUpReminder {
  id                  String             @id @default(uuid())
  title               String
  description         String?
  followUpType        FollowUpType
  status              FollowUpStatus     @default(PENDING)
  dueDate             DateTime
  completedDate       DateTime?
  reminderDate        DateTime?
  pastoralVisitId     String?
  counselingSessionId String?
  careRequestId       String?
  memberId            String?
  assignedToId        String
  notes               String?
  completionNotes     String?
  actionRequired      String?
  organisationId      String
  branchId            String?
  createdBy           String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  assignedTo          User               @relation("FollowUpReminderAssignedTo", fields: [assignedToId], references: [id])
  branch              Branch?            @relation(fields: [branchId], references: [id])
  careRequest         CareRequest?       @relation(fields: [careRequestId], references: [id])
  counselingSession   CounselingSession? @relation(fields: [counselingSessionId], references: [id])
  creator             User               @relation("FollowUpReminderCreator", fields: [createdBy], references: [id])
  member              Member?            @relation(fields: [memberId], references: [id])
  organisation        Organisation       @relation(fields: [organisationId], references: [id])
  pastoralVisit       PastoralVisit?     @relation(fields: [pastoralVisitId], references: [id])

  @@index([assignedToId])
  @@index([organisationId])
  @@index([branchId])
  @@index([status])
  @@index([followUpType])
  @@index([dueDate])
  @@index([pastoralVisitId])
  @@index([counselingSessionId])
  @@index([careRequestId])
  @@index([memberId])
}

model SubscriptionPlan {
  id               String               @id @default(uuid())
  name             String
  description      String?
  amount           Float
  currency         String               @default("NGN")
  interval         SubscriptionInterval @default(MONTHLY)
  intervalCount    Int                  @default(1)
  trialPeriodDays  Int?
  isActive         Boolean              @default(true)
  paystackPlanCode String?              @unique
  features         Json?
  metadata         Json?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  subscriptions    Subscription[]

  @@index([isActive])
  @@index([paystackPlanCode])
}

model Subscription {
  id                       String                @id @default(uuid())
  customerId               String
  planId                   String
  status                   SubscriptionStatus    @default(ACTIVE)
  paystackSubscriptionCode String?               @unique
  paystackCustomerCode     String?
  currentPeriodStart       DateTime
  currentPeriodEnd         DateTime
  trialStart               DateTime?
  trialEnd                 DateTime?
  cancelledAt              DateTime?
  cancelAtPeriodEnd        Boolean               @default(false)
  cancelReason             String?
  nextBillingDate          DateTime?
  lastPaymentDate          DateTime?
  failedPaymentCount       Int                   @default(0)
  metadata                 Json?
  organisationId           String
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  customer                 Organisation          @relation("SubscriptionCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  organisation             Organisation          @relation("SubscriptionOrganisation", fields: [organisationId], references: [id], onDelete: Cascade)
  plan                     SubscriptionPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  payments                 SubscriptionPayment[]

  @@index([customerId])
  @@index([planId])
  @@index([status])
  @@index([organisationId])
  @@index([paystackSubscriptionCode])
  @@index([currentPeriodEnd])
  @@index([nextBillingDate])
}

model SubscriptionPayment {
  id                    String        @id @default(uuid())
  subscriptionId        String
  amount                Float
  currency              String        @default("NGN")
  status                PaymentStatus @default(PENDING)
  paystackReference     String?       @unique
  paystackTransactionId String?       @unique
  authorizationCode     String?
  paidAt                DateTime?
  failedAt              DateTime?
  periodStart           DateTime
  periodEnd             DateTime
  invoiceNumber         String?
  failureReason         String?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
  @@index([paystackReference])
  @@index([paidAt])
  @@index([periodStart])
  @@index([periodEnd])
}

model PaystackCustomer {
  id                   String   @id @default(uuid())
  memberId             String   @unique
  paystackCustomerCode String   @unique
  email                String
  firstName            String?
  lastName             String?
  phone                String?
  metadata             Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([paystackCustomerCode])
  @@index([email])
}

model WebhookEvent {
  id             String        @id @default(uuid())
  eventType      String
  paystackId     String?
  data           Json
  processed      Boolean       @default(false)
  processedAt    DateTime?
  errorMessage   String?
  retryCount     Int           @default(0)
  organisationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([eventType])
  @@index([processed])
  @@index([paystackId])
  @@index([organisationId])
  @@index([createdAt])
}

model MemberIdConfig {
  id             String       @id @default(uuid())
  organisationId String       @unique
  pattern        String
  enabled        Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
}

model MemberIdSequence {
  id             String       @id @default(uuid())
  organisationId String
  branchId       String?
  year           Int
  currentValue   Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  branch         Branch?      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([organisationId, branchId, year])
  @@index([organisationId])
  @@index([branchId])
  @@index([year])
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PENDING_REVIEW
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO_FILE
  DOCUMENT_PDF
  DOCUMENT_WORD
  SLIDESHOW
  OTHER
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
  NOT_SPECIFIED
}

enum MessageStatus {
  DRAFT
  PENDING_APPROVAL
  SCHEDULED
  SENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  EVENT_REMINDER
}

enum SacramentType {
  BAPTISM
  EUCHARIST_FIRST_COMMUNION
  CONFIRMATION
  RECONCILIATION_FIRST
  ANOINTING_OF_THE_SICK
  HOLY_ORDERS_DIACONATE
  HOLY_ORDERS_PRIESTHOOD
  MATRIMONY
  RCIA_INITIATION
  OTHER
}

enum PrayerRequestStatus {
  NEW
  IN_PROGRESS
  ANSWERED
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FormFieldType {
  TEXT
  TEXTAREA
  EMAIL
  NUMBER
  PHONE
  DATE
  TIME
  DATETIME
  SELECT
  MULTISELECT
  CHECKBOX
  RADIO
  FILE
  HEADING
  PARAGRAPH
  DIVIDER
}

enum ReportFrequencyEnum {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum OnboardingStep {
  WELCOME
  ADMIN_SETUP
  ORGANIZATION_DETAILS
  BRANCH_SETUP
  BRANDING
  USER_INVITATIONS
  ROLE_CONFIGURATION
  MEMBER_IMPORT
  FINANCIAL_SETUP
  MODULE_QUICK_START
  COMPLETION
}

enum TransactionType {
  CONTRIBUTION
  EXPENSE
  TRANSFER
  FUND_ALLOCATION
}

enum WorkflowType {
  FOLLOW_UP
  EVENT_REMINDER
  MEMBERSHIP_RENEWAL
  DONATION_ACKNOWLEDGMENT
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  PAUSED
  DELETED
}

enum WorkflowTriggerType {
  MEMBER_CREATED
  MEMBER_UPDATED
  EVENT_CREATED
  EVENT_APPROACHING
  DONATION_RECEIVED
  MEMBERSHIP_EXPIRING
  ATTENDANCE_RECORDED
  CUSTOM_DATE
}

enum WorkflowActionType {
  SEND_EMAIL
  SEND_SMS
  SEND_NOTIFICATION
  UPDATE_MEMBER_STATUS
  CREATE_TASK
  WAIT_DELAY
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum PastoralVisitType {
  HOME_VISIT
  HOSPITAL_VISIT
  OFFICE_MEETING
  PHONE_CALL
  VIDEO_CALL
  EMERGENCY_VISIT
  FOLLOW_UP_VISIT
  BEREAVEMENT_VISIT
  COUNSELING_SESSION
  PRAYER_VISIT
}

enum PastoralVisitStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum CounselingSessionType {
  INDIVIDUAL
  COUPLES
  FAMILY
  GROUP
  CRISIS
  GRIEF
  MARRIAGE
  ADDICTION
  SPIRITUAL
  GENERAL
}

enum CounselingSessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum CareRequestType {
  PRAYER_REQUEST
  HOSPITAL_VISIT
  HOME_VISIT
  COUNSELING
  CRISIS_SUPPORT
  BEREAVEMENT
  FINANCIAL_ASSISTANCE
  SPIRITUAL_GUIDANCE
  FAMILY_CRISIS
  GENERAL_SUPPORT
}

enum CareRequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  EMERGENCY
}

enum CareRequestStatus {
  SUBMITTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CLOSED
  CANCELLED
}

enum FollowUpType {
  PASTORAL_VISIT
  COUNSELING_SESSION
  CARE_REQUEST
  MEMBER_CONTACT
  EVENT_FOLLOW_UP
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  OVERDUE
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionInterval {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum OrganisationStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  CANCELLED
  INACTIVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  ENGAGED
  UNKNOWN
}

enum MembershipStatus {
  VISITOR
  REGULAR_ATTENDEE
  MEMBER
  ACTIVE_MEMBER
  INACTIVE_MEMBER
  TRANSFERRED
  DECEASED
}

enum MembershipType {
  REGULAR
  ASSOCIATE
  HONORARY
  YOUTH
  CHILD
  SENIOR
  CLERGY
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRANSFERRED
  DECEASED
  REMOVED
}

enum PrivacyLevel {
  PUBLIC
  STANDARD
  RESTRICTED
  PRIVATE
}

enum RelationshipType {
  SPOUSE
  PARENT
  CHILD
  SIBLING
  GRANDPARENT
  GRANDCHILD
  UNCLE_AUNT
  NEPHEW_NIECE
  COUSIN
  GUARDIAN
  WARD
  FRIEND
  EMERGENCY_CONTACT
  OTHER
}

enum EventType {
  WORSHIP_SERVICE
  WEDDING
  FUNERAL
  BAPTISM
  GRADUATION
  CONFERENCE
  WORKSHOP
  RETREAT
  FELLOWSHIP
  YOUTH_EVENT
  CHILDREN_EVENT
  PRAYER_MEETING
  BIBLE_STUDY
  COMMUNITY_SERVICE
  FUNDRAISER
  CELEBRATION
  MEETING
  OTHER
}

enum RSVPStatus {
  PENDING
  ATTENDING
  NOT_ATTENDING
  MAYBE
  CANCELLED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

// Death Register Enums
enum BurialType {
  BURIAL
  CREMATION
}

// Death Register Model
model DeathRegister {
  id                   String        @id @default(uuid())
  memberId             String        @unique
  dateOfDeath          DateTime
  timeOfDeath          String?
  placeOfDeath         String
  causeOfDeath         String?
  circumstances        String?
  
  // Funeral Information
  funeralDate          DateTime?
  funeralLocation      String?
  funeralOfficiant     String?
  burialCremation      BurialType
  cemeteryLocation     String?
  
  // Family & Contacts
  nextOfKin            String
  nextOfKinPhone       String?
  nextOfKinEmail       String?
  familyNotified       Boolean       @default(false)
  notificationDate     DateTime?
  
  // Documentation
  deathCertificateUrl  String?
  obituaryUrl          String?
  photoUrls            String[]      @default([])
  additionalDocuments  String[]      @default([])
  
  // Administrative
  recordedBy           String
  recordedDate         DateTime      @default(now())
  lastUpdatedBy        String?
  lastUpdatedDate      DateTime?     @updatedAt
  
  // Foreign Keys
  branchId             String?
  organisationId       String
  funeralEventId       String?
  
  // Relations
  member               Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  branch               Branch?       @relation(fields: [branchId], references: [id])
  organisation         Organisation  @relation(fields: [organisationId], references: [id])
  funeralEvent         Event?        @relation("DeathRegisterFuneralEvent", fields: [funeralEventId], references: [id])
  
  @@index([memberId])
  @@index([branchId])
  @@index([organisationId])
  @@index([dateOfDeath])
  @@index([familyNotified])
  @@index([recordedDate])
}
