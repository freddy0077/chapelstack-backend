// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  phoneNumber     String?
  isActive        Boolean         @default(true)
  isEmailVerified Boolean         @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  auditLogs       AuditLog[]
  backups         Backup[]
  dataOperations  DataOperation[]
  refreshTokens   RefreshToken[]
  userBranches    UserBranch[]
  roles           Role[]          @relation("UserRoles")
}

model Role {
  id           String       @id @default(uuid())
  name         String       @unique
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userBranches UserBranch[]
  permissions  Permission[] @relation("RolePermissions")
  users        User[]       @relation("UserRoles")
}

model Permission {
  id          String   @id @default(uuid())
  action      String
  subject     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("RolePermissions")

  @@unique([action, subject])
}

model Branch {
  id                    String          @id @default(uuid())
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  address               String?
  city                  String?
  country               String?
  email                 String?         @unique
  establishedAt         DateTime?
  isActive              Boolean         @default(true)
  phoneNumber           String?
  postalCode            String?
  state                 String?
  website               String?
  auditLogs             AuditLog[]
  settings              BranchSetting[]
  members               Member[]
  settingsModuleEntries Setting[]       @relation("SettingsModuleBranchSpecific")
  userBranches          UserBranch[]
  Ministry              Ministry[]
  SmallGroup            SmallGroup[]
}

model UserBranch {
  userId     String
  branchId   String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, branchId, roleId])
  @@index([userId])
  @@index([branchId])
  @@index([roleId])
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      String
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BranchSetting {
  id        String   @id @default(uuid())
  branchId  String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, key])
  @@index([branchId])
}

model Setting {
  id        String   @id @default(cuid())
  key       String
  value     String
  branchId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch?  @relation("SettingsModuleBranchSpecific", fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([key, branchId], name: "settings_module_key_branchId_unique")
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entityType  String
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  userId      String?
  branchId    String?
  createdAt   DateTime @default(now())
  branch      Branch?  @relation(fields: [branchId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([branchId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

model DataOperation {
  id          String    @id @default(uuid())
  type        String
  status      String
  entityType  String
  description String?
  metadata    Json?
  filePath    String?
  fileSize    Int?
  recordCount Int?
  errorCount  Int?
  errors      Json?
  userId      String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  user        User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([entityType])
}

model Backup {
  id           String    @id @default(uuid())
  type         String
  status       String
  description  String?
  metadata     Json?
  filePath     String?
  fileSize     Int?
  duration     Int?
  errorDetails Json?
  userId       String?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  user         User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([type])
}

model Member {
  id                  String               @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  gender              String
  dateOfBirth         DateTime?
  email               String?              @unique
  phoneNumber         String?
  alternatePhone      String?
  address             String?
  city                String?
  state               String?
  postalCode          String?
  country             String?
  occupation          String?
  employerName        String?
  maritalStatus       String?
  membershipDate      DateTime?
  baptismDate         DateTime?
  confirmationDate    DateTime?
  status              String
  statusChangeDate    DateTime?
  statusChangeReason  String?
  profileImageUrl     String?
  customFields        Json?
  privacySettings     Json?
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  branchId            String?
  spouseId            String?              @unique
  parentId            String?
  familyRelationships FamilyRelationship[] @relation("MemberRelationships")
  relatedToMembers    FamilyRelationship[] @relation("RelatedMemberRelationships")
  branch              Branch?              @relation(fields: [branchId], references: [id])
  parent              Member?              @relation("MemberParent", fields: [parentId], references: [id])
  children            Member[]             @relation("MemberParent")
  spouse              Member?              @relation("MemberSpouse", fields: [spouseId], references: [id])
  spouseOf            Member?              @relation("MemberSpouse")
  spiritualMilestones SpiritualMilestone[]
  families            Family[]             @relation("MemberFamilies")
  groupMemberships    GroupMember[]

  @@index([branchId])
  @@index([status])
  @@index([membershipDate])
}

model SpiritualMilestone {
  id                String   @id @default(uuid())
  type              String
  date              DateTime
  location          String?
  performedBy       String?
  description       String?
  additionalDetails Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  memberId          String
  member            Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([type])
  @@index([date])
}

model Family {
  id            String               @id @default(uuid())
  name          String
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  phoneNumber   String?
  customFields  Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  relationships FamilyRelationship[]
  members       Member[]             @relation("MemberFamilies")

  @@index([name])
}

model FamilyRelationship {
  id               String   @id @default(uuid())
  relationshipType String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  memberId         String
  relatedMemberId  String
  familyId         String?
  family           Family?  @relation(fields: [familyId], references: [id])
  member           Member   @relation("MemberRelationships", fields: [memberId], references: [id], onDelete: Cascade)
  relatedMember    Member   @relation("RelatedMemberRelationships", fields: [relatedMemberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([relatedMemberId])
  @@index([familyId])
  @@index([relationshipType])
}

model License {
  id               String   @id
  key              String   @unique
  type             String
  status           String
  startDate        DateTime
  expiryDate       DateTime
  organizationName String?
  contactEmail     String?
  contactPhone     String?
  features         Json?
  maxUsers         Int?
  maxBranches      Int?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime

  @@index([expiryDate])
  @@index([key])
  @@index([status])
  @@index([type])
}

// Ministry model
model Ministry {
  id            String     @id @default(uuid())
  name          String
  description   String?
  type          String // e.g., WORSHIP, OUTREACH, EDUCATION, PRAYER, YOUTH, CHILDREN, MISSIONS, ADMINISTRATION, OTHER
  status        String // ACTIVE, INACTIVE
  branchId      String?
  branch        Branch?    @relation(fields: [branchId], references: [id])
  parentId      String?
  parent        Ministry?  @relation("SubMinistries", fields: [parentId], references: [id])
  subMinistries Ministry[] @relation("SubMinistries")

  // Relationships
  members     GroupMember[]
  smallGroups SmallGroup[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([branchId])
  @@index([parentId])
  @@index([type])
  @@index([status])
}

// Small Group model
model SmallGroup {
  id              String    @id @default(uuid())
  name            String
  description     String?
  type            String // e.g., BIBLE_STUDY, PRAYER, INTEREST_BASED, DISCIPLESHIP, SUPPORT, FELLOWSHIP, OTHER
  meetingSchedule String? // day, time, frequency
  location        String?
  maximumCapacity Int?
  status          String // ACTIVE, INACTIVE, FULL
  branchId        String?
  branch          Branch?   @relation(fields: [branchId], references: [id])
  ministryId      String?
  ministry        Ministry? @relation(fields: [ministryId], references: [id])

  // Relationships
  members GroupMember[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([branchId])
  @@index([ministryId])
  @@index([type])
  @@index([status])
}

// Group Member model (for both Ministry and Small Group members)
model GroupMember {
  id       String   @id @default(uuid())
  role     String // LEADER, CO_LEADER, MEMBER
  joinDate DateTime @default(now())
  status   String // ACTIVE, INACTIVE

  // Relationships
  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  // Ministry relationship (optional)
  ministryId String?
  ministry   Ministry? @relation(fields: [ministryId], references: [id])

  // Small Group relationship (optional)
  smallGroupId String?
  smallGroup   SmallGroup? @relation(fields: [smallGroupId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, ministryId, smallGroupId])
  @@index([memberId])
  @@index([ministryId])
  @@index([smallGroupId])
  @@index([role])
  @@index([status])
}
