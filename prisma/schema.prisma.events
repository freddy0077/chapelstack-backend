// Event-related models

model Event {
  id                String            @id @default(uuid())
  title             String
  description       String?
  startDate         DateTime
  endDate           DateTime
  isAllDay          Boolean           @default(false)
  isRecurring       Boolean           @default(false)
  recurrencePattern Json?             // For storing recurrence rules (RRULE)
  location          String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  virtualMeetingUrl String?
  isVirtual         Boolean           @default(false)
  isPrivate         Boolean           @default(false)
  maxAttendees      Int?
  status            String            @default("SCHEDULED") // SCHEDULED, CANCELLED, COMPLETED, POSTPONED
  color             String?           // For calendar display
  customFields      Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  categoryId        String?
  category          EventCategory?    @relation(fields: [categoryId], references: [id])
  branchId          String?
  branch            Branch?           @relation(fields: [branchId], references: [id], onDelete: SetNull)
  createdById       String?
  createdBy         User?             @relation(fields: [createdById], references: [id], onDelete: SetNull)
  tags              EventTag[]        @relation("EventTags")
  resources         EventResource[]   @relation("EventResources")
  attendees         EventAttendee[]
  volunteers        EventVolunteer[]
  notifications     EventNotification[]

  @@index([startDate])
  @@index([endDate])
  @@index([branchId])
  @@index([categoryId])
  @@index([status])
  @@index([isPrivate])
  @@index([isRecurring])
}

model EventCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String?  // For calendar display
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events      Event[]
  branchId    String?
  branch      Branch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)

  @@index([branchId])
}

model EventTag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events      Event[]  @relation("EventTags")

  @@index([name])
}

model EventResource {
  id          String   @id @default(uuid())
  eventId     String
  event       Event    @relation("EventResources", fields: [eventId], references: [id], onDelete: Cascade)
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  quantity    Int      @default(1)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([eventId, resourceId])
  @@index([eventId])
  @@index([resourceId])
}

model Resource {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String   // ROOM, EQUIPMENT, VEHICLE, OTHER
  capacity    Int?     // For rooms
  location    String?
  isAvailable Boolean  @default(true)
  customFields Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branchId    String?
  branch      Branch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  events      EventResource[]

  @@index([branchId])
  @@index([type])
  @@index([isAvailable])
}

model EventAttendee {
  id          String   @id @default(uuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  memberId    String?
  member      Member?  @relation(fields: [memberId], references: [id], onDelete: SetNull)
  name        String?  // For non-members
  email       String?
  phone       String?
  status      String   @default("REGISTERED") // REGISTERED, ATTENDED, CANCELLED, NO_SHOW
  checkInTime DateTime?
  checkOutTime DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventId])
  @@index([memberId])
  @@index([status])
}

model EventVolunteer {
  id          String   @id @default(uuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  memberId    String
  member      Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  role        String
  startTime   DateTime
  endTime     DateTime
  status      String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, DECLINED, COMPLETED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventId])
  @@index([memberId])
  @@index([role])
  @@index([status])
}

model EventNotification {
  id          String   @id @default(uuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  type        String   // EMAIL, SMS, PUSH, IN_APP
  title       String
  message     String
  scheduledFor DateTime
  sentAt      DateTime?
  status      String   @default("SCHEDULED") // SCHEDULED, SENT, FAILED
  recipients  Json     // Array of recipient IDs or contact info
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventId])
  @@index([scheduledFor])
  @@index([status])
}
