version: '3.9'
services:
  backend:
    build: .
    container_name: chapel-backend
    # Port is no longer exposed directly. Nginx will handle traffic.
    ports:
      - "4000:4000"
    env_file:
      - .env.prod
    volumes:
      - ./prisma:/app/prisma
      - ./src:/app/src
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
#    command: sh -c "npx prisma generate && npx prisma migrate deploy && npm run start:prod"
    command: sh -c "npm run start:prod"

  db:
    image: postgres:14
    container_name: chapel-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: chapel
      POSTGRES_USER: chapel
      POSTGRES_PASSWORD: chapel
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Africa/Accra
      PGTZ: Africa/Accra
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chapel"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: chapel-redis
    ports:
      - "6379:6379"
    restart: unless-stopped

#  webserver:
#    image: nginx:latest
#    container_name: chapel-nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./nginx-backend.conf:/etc/nginx/conf.d/default.conf
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
#    command: /bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
#    depends_on:
#      - backend

#  certbot:
#    image: certbot/certbot
#    container_name: chapel-certbot
#    volumes:
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  portainer_data:
