import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import {
  AnnouncementItem,
  AnnouncementsWidget,
  DashboardData,
  DashboardType,
  EventItem,
  GroupItem,
  MyGroupsWidget,
  NotificationItem,
  NotificationsWidget,
  QuickLinkItem,
  QuickLinksWidget,
  TaskItem,
  TasksWidget,
  UpcomingEventsWidget,
  WidgetType,
} from '../entities/dashboard-data.entity';
import { MemberReportsService } from './member-reports.service';
import { AttendanceReportsService } from './attendance-reports.service';
import { FinancialReportsService } from './financial-reports.service';
import { UserDashboardPreference } from '../entities/user-dashboard-preference.entity';

@Injectable()
export class DashboardService {
  private readonly logger = new Logger(DashboardService.name);
  
  constructor(
    private prisma: PrismaService,
    private memberReportsService: MemberReportsService,
    private attendanceReportsService: AttendanceReportsService,
    private financialReportsService: FinancialReportsService,
  ) {}

  async getDashboardData(
    branchId: string,
    dashboardType: DashboardType,
    userId?: string,
  ): Promise<DashboardData> {
    // Get branch name
    const branch = await this.prisma.branch.findUnique({
      where: { id: branchId },
      select: { name: true },
    });

    // Set date ranges for reports
    const today = new Date();
    const lastMonth = new Date(today);
    lastMonth.setMonth(today.getMonth() - 1);

    const lastThreeMonths = new Date(today);
    lastThreeMonths.setMonth(today.getMonth() - 3);

    // Initialize dashboard data
    const dashboardData: DashboardData = {
      branchId,
      branchName: branch?.name,
      dashboardType,
      generatedAt: new Date(),
      kpiCards: [],
      charts: [],
    };

    // Generate dashboard content based on type
    switch (dashboardType) {
      case DashboardType.PASTORAL:
        await this.generatePastoralDashboard(
          dashboardData,
          branchId,
          lastMonth,
          today,
        );
        break;
      case DashboardType.ADMIN:
        await this.generateAdminDashboard(
          dashboardData,
          branchId,
          lastMonth,
          today,
        );
        break;
      case DashboardType.FINANCE:
        await this.generateFinanceDashboard(
          dashboardData,
          branchId,
          lastThreeMonths,
          today,
        );
        break;
      case DashboardType.MINISTRY:
        await this.generateMinistryDashboard(
          dashboardData,
          branchId,
          lastMonth,
          today,
        );
        break;
      default:
        throw new Error(`Unsupported dashboard type: ${dashboardType}`);
    }

    // Add additional widgets based on dashboard type and user preferences
    if (userId) {
      await this.addUserSpecificWidgets(dashboardData, branchId, userId);
    }
    
    return dashboardData;
  }
  
  /**
   * Get a user's dashboard preference
   */
  async getUserDashboardPreference(
    userId: string,
    branchId: string,
    dashboardType: DashboardType,
  ): Promise<UserDashboardPreference | null> {
    try {
      const preference = await this.prisma.userDashboardPreference.findUnique({
        where: {
          userId_branchId_dashboardType: {
            userId,
            branchId,
            dashboardType,
          },
        },
      });

      if (!preference) return null;
      
      // Convert string to enum and ensure layoutConfig is a Record<string, any>
      return {
        ...preference,
        dashboardType: preference.dashboardType as DashboardType,
        layoutConfig: preference.layoutConfig as Record<string, any>,
      };
    } catch (error: unknown) {
      const err = error as Error;
      this.logger.error(
        `Error fetching user dashboard preference: ${err.message}`,
        err.stack,
      );
      return null;
    }
  }
  
  /**
   * Save a user's dashboard preference
   */
  async saveUserDashboardPreference(
    userId: string,
    branchId: string,
    dashboardType: DashboardType,
    layoutConfig: Record<string, any>,
  ): Promise<UserDashboardPreference> {
    try {
      const savedPreference = await this.prisma.userDashboardPreference.upsert({
        where: {
          userId_branchId_dashboardType: {
            userId,
            branchId,
            dashboardType,
          },
        },
        update: {
          layoutConfig,
        },
        create: {
          userId,
          branchId,
          dashboardType,
          layoutConfig,
        },
      });
      // Convert string to enum and ensure layoutConfig is a Record<string, any>
      return {
        ...savedPreference,
        dashboardType: savedPreference.dashboardType as DashboardType,
        layoutConfig: savedPreference.layoutConfig as Record<string, any>,
      };
    } catch (error: unknown) {
      const err = error as Error;
      this.logger.error(
        `Error saving user dashboard preference: ${err.message}`,
        err.stack,
      );
      throw new Error(`Failed to save dashboard preference: ${err.message}`);
    }
  }
  
  /**
   * Add user-specific widgets to the dashboard data
   */
  private async addUserSpecificWidgets(
    dashboardData: DashboardData,
    branchId: string,
    userId: string,
  ): Promise<void> {
    try {
      // Add upcoming events widget
      dashboardData.upcomingEvents = await this.getUpcomingEvents(branchId);
      
      // Add tasks widget
      dashboardData.tasks = await this.getUserTasks(userId, branchId);
      
      // Add user's groups widget
      dashboardData.myGroups = await this.getUserGroups(userId, branchId);
      
      // Add announcements widget
      dashboardData.announcements = await this.getAnnouncements(branchId);
      
      // Add quick links widget
      dashboardData.quickLinks = await this.getQuickLinks(dashboardData.dashboardType);
      
      // Add notifications widget
      dashboardData.notifications = await this.getUserNotifications(userId);
    } catch (error) {
      this.logger.error(
        `Error adding user-specific widgets: ${error.message}`,
        error.stack,
      );
      // Don't throw, just log the error and continue
    }
  }
  
  /**
   * Get upcoming events for the dashboard
   */
  private async getUpcomingEvents(branchId: string): Promise<UpcomingEventsWidget> {
    // This would typically query your events database
    // For now, we'll return placeholder data
    const today = new Date();
    const nextWeek = new Date(today);
    nextWeek.setDate(today.getDate() + 7);
    
    const events: EventItem[] = [
      {
        id: '1',
        title: 'Sunday Service',
        startDate: new Date(today.getTime()),
        location: 'Main Sanctuary',
        description: 'Weekly worship service',
      },
      {
        id: '2',
        title: 'Prayer Meeting',
        startDate: new Date(today.getTime()),
        location: 'Prayer Room',
        description: 'Weekly prayer gathering',
      },
      {
        id: '3',
        title: 'Youth Group',
        startDate: new Date(today.getTime()),
        location: 'Youth Center',
        description: 'Weekly youth ministry meeting',
      },
    ];
    
    return {
      title: 'Upcoming Events',
      events,
      widgetType: WidgetType.UPCOMING_EVENTS,
    };
  }
  
  /**
   * Get user tasks for the dashboard
   */
  private async getUserTasks(userId: string, branchId: string): Promise<TasksWidget> {
    // This would typically query your tasks database
    // For now, we'll return placeholder data
    const tasks: TaskItem[] = [
      {
        id: '1',
        title: 'Follow up with new visitors',
        dueDate: new Date(new Date().setDate(new Date().getDate() + 2)),
        status: 'PENDING',
        priority: 'HIGH',
      },
      {
        id: '2',
        title: 'Prepare Sunday sermon',
        dueDate: new Date(new Date().setDate(new Date().getDate() + 4)),
        status: 'IN_PROGRESS',
        priority: 'HIGH',
      },
      {
        id: '3',
        title: 'Review monthly financial report',
        dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),
        status: 'PENDING',
        priority: 'MEDIUM',
      },
    ];
    
    return {
      title: 'My Tasks',
      tasks,
      widgetType: WidgetType.TASKS,
    };
  }
  
  /**
   * Get user groups for the dashboard
   */
  private async getUserGroups(userId: string, branchId: string): Promise<MyGroupsWidget> {
    // This would typically query your groups database
    // For now, we'll return placeholder data
    const groups: GroupItem[] = [
      {
        id: '1',
        name: 'Worship Team',
        type: 'Ministry Team',
        role: 'Member',
        nextMeeting: new Date(new Date().setDate(new Date().getDate() + 3)),
      },
      {
        id: '2',
        name: 'Men\'s Bible Study',
        type: 'Small Group',
        role: 'Leader',
        nextMeeting: new Date(new Date().setDate(new Date().getDate() + 5)),
      },
      {
        id: '3',
        name: 'Finance Committee',
        type: 'Committee',
        role: 'Member',
        nextMeeting: new Date(new Date().setDate(new Date().getDate() + 10)),
      },
    ];
    
    return {
      title: 'My Groups',
      groups,
      widgetType: WidgetType.MY_GROUPS,
    };
  }
  
  /**
   * Get announcements for the dashboard
   */
  private async getAnnouncements(branchId: string): Promise<AnnouncementsWidget> {
    // This would typically query your announcements database
    // For now, we'll return placeholder data
    const announcements: AnnouncementItem[] = [
      {
        id: '1',
        title: 'Church Picnic',
        content: 'Join us for our annual church picnic next Saturday at 11 AM in Central Park.',
        date: new Date(),
        author: 'Pastor John',
      },
      {
        id: '2',
        title: 'Volunteer Opportunity',
        content: 'We need volunteers for the upcoming community outreach event. Please sign up at the welcome desk.',
        date: new Date(new Date().setDate(new Date().getDate() - 1)),
        author: 'Outreach Coordinator',
      },
      {
        id: '3',
        title: 'Building Fund Update',
        content: 'We\'ve reached 75% of our building fund goal! Thank you for your generous contributions.',
        date: new Date(new Date().setDate(new Date().getDate() - 2)),
        author: 'Finance Committee',
      },
    ];
    
    return {
      title: 'Announcements',
      announcements,
      widgetType: WidgetType.ANNOUNCEMENTS,
    };
  }
  
  /**
   * Get quick links for the dashboard based on dashboard type
   */
  private async getQuickLinks(dashboardType: DashboardType): Promise<QuickLinksWidget> {
    // Define links based on dashboard type
    const links: QuickLinkItem[] = [];
    
    // Common links for all dashboard types
    links.push(
      {
        title: 'Calendar',
        url: '/calendar',
        icon: 'calendar',
      },
      {
        title: 'Directory',
        url: '/directory',
        icon: 'book',
      }
    );
    
    // Add dashboard-specific links
    switch (dashboardType) {
      case DashboardType.PASTORAL:
        links.push(
          {
            title: 'Sermon Notes',
            url: '/content/sermons',
            icon: 'file-text',
          },
          {
            title: 'Visitation Log',
            url: '/pastoral/visitation',
            icon: 'home',
          }
        );
        break;
      case DashboardType.ADMIN:
        links.push(
          {
            title: 'User Management',
            url: '/admin/users',
            icon: 'users',
          },
          {
            title: 'System Settings',
            url: '/admin/settings',
            icon: 'settings',
          }
        );
        break;
      case DashboardType.FINANCE:
        links.push(
          {
            title: 'Contribution Entry',
            url: '/finances/contributions/new',
            icon: 'dollar-sign',
          },
          {
            title: 'Budget Management',
            url: '/finances/budgets',
            icon: 'pie-chart',
          }
        );
        break;
      case DashboardType.MINISTRY:
        links.push(
          {
            title: 'Group Management',
            url: '/groups',
            icon: 'users',
          },
          {
            title: 'Event Planning',
            url: '/events/new',
            icon: 'calendar-plus',
          }
        );
        break;
      case DashboardType.MEMBER:
        links.push(
          {
            title: 'My Profile',
            url: '/profile',
            icon: 'user',
          },
          {
            title: 'My Giving',
            url: '/my-giving',
            icon: 'heart',
          }
        );
        break;
    }
    
    return {
      title: 'Quick Links',
      links,
      widgetType: WidgetType.QUICK_LINKS,
    };
  }
  
  /**
   * Get user notifications for the dashboard
   */
  private async getUserNotifications(userId: string): Promise<NotificationsWidget> {
    // This would typically query your notifications database
    // For now, we'll return placeholder data
    const notifications: NotificationItem[] = [
      {
        id: '1',
        message: 'You have been assigned to follow up with 3 new visitors',
        date: new Date(new Date().setHours(new Date().getHours() - 2)),
        type: 'INFO',
        read: false,
      },
      {
        id: '2',
        message: 'Your small group meeting has been rescheduled to next Tuesday',
        date: new Date(new Date().setHours(new Date().getHours() - 5)),
        type: 'WARNING',
        read: true,
      },
      {
        id: '3',
        message: 'Your contribution receipt for May is now available',
        date: new Date(new Date().setDate(new Date().getDate() - 1)),
        type: 'SUCCESS',
        read: false,
      },
    ];
    
    return {
      title: 'Notifications',
      notifications,
      widgetType: WidgetType.NOTIFICATIONS,
    };
  }

  private async generatePastoralDashboard(

/**
 * Get quick links for the dashboard based on dashboard type
 */
private async getQuickLinks(dashboardType: DashboardType): Promise<QuickLinksWidget> {
  // Define links based on dashboard type
  const links: QuickLinkItem[] = [];
  
  // Common links for all dashboard types
  links.push(
    {
      title: 'Calendar',
      url: '/calendar',
      icon: 'calendar',
    },
    {
      title: 'Directory',
      url: '/directory',
      icon: 'book',
    }
  );
  
  // Add dashboard-specific links
  switch (dashboardType) {
    case DashboardType.PASTORAL:
      links.push(
        {
          title: 'Sermon Notes',
          url: '/content/sermons',
          icon: 'file-text',
        },
        {
          title: 'Visitation Log',
          url: '/pastoral/visitation',
          icon: 'home',
        }
      );
      break;
    case DashboardType.ADMIN:
      links.push(
        {
          title: 'User Management',
          url: '/admin/users',
          icon: 'users',
        },
        {
          title: 'System Settings',
          url: '/admin/settings',
          icon: 'settings',
        }
      );
      break;
    case DashboardType.FINANCE:
      links.push(
        {
          title: 'Contribution Entry',
          url: '/finances/contributions/new',
          icon: 'dollar-sign',
        },
        {
          title: 'Budget Management',
          url: '/finances/budgets',
          icon: 'pie-chart',
        }
      );
      break;
    case DashboardType.MINISTRY:
      links.push(
        {
          title: 'Group Management',
          url: '/groups',
          icon: 'users',
        },
        {
          title: 'Event Planning',
          url: '/events/new',
          icon: 'calendar-plus',
        }
      );
      break;
    case DashboardType.MEMBER:
      links.push(
        {
          title: 'My Profile',
          url: '/profile',
          icon: 'user',
        },
        {
          title: 'My Giving',
          url: '/my-giving',
          icon: 'heart',
        }
      );
      break;
  }
  
  return {
    title: 'Quick Links',
    links,
    widgetType: WidgetType.QUICK_LINKS,
  };
}

/**
 * Get user notifications for the dashboard
 */
private async getUserNotifications(userId: string): Promise<NotificationsWidget> {
  // This would typically query your notifications database
  // For now, we'll return placeholder data
  const notifications: NotificationItem[] = [
    {
      id: '1',
      message: 'You have been assigned to follow up with 3 new visitors',
      date: new Date(new Date().setHours(new Date().getHours() - 2)),
      type: 'INFO',
      read: false,
    },
    {
      id: '2',
      message: 'Your small group meeting has been rescheduled to next Tuesday',
      date: new Date(new Date().setHours(new Date().getHours() - 5)),
      type: 'WARNING',
      read: true,
    },
    {
      id: '3',
      message: 'Your contribution receipt for May is now available',
      date: new Date(new Date().setDate(new Date().getDate() - 1)),
      type: 'SUCCESS',
      read: false,
    },
  ];
  
  return {
    title: 'Notifications',
    notifications,
    widgetType: WidgetType.NOTIFICATIONS,
  };
}

private async generatePastoralDashboard(
  dashboardData: DashboardData,
  branchId: string,
  startDate: Date,
  endDate: Date,
): Promise<void> {
  try {
    // Get member count
    const totalMembers = await this.prisma.member.count({
      where: { branchId },
    });

    // Get new members in the last month
    const newMembers = await this.prisma.member.count({
      where: {
        branchId,
        createdAt: {
          gte: startDate,
          lte: endDate,
        },
      },
    });

    // Get attendance trend
    const attendanceTrend = await this.attendanceReportsService.getAttendanceTrend(
      branchId,
      startDate,
      endDate,
    );

    // Add KPI cards
    dashboardData.kpiCards = [
      {
        title: 'Total Members',
        value: totalMembers.toString(),
        icon: 'users',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'New Members (Last Month)',
        value: newMembers.toString(),
        percentChange: 0, // Would calculate actual percentage in real implementation
        icon: 'user-plus',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'Average Attendance',
        value: Math.round(attendanceTrend.averageAttendance).toString(),
        percentChange: attendanceTrend.percentChangeFromPreviousPeriod,
        icon: 'calendar-check',
        widgetType: WidgetType.KPI_CARD,
      },
    ];

    // Add charts
    dashboardData.charts = [
      {
        chartType: 'line',
        title: 'Attendance Trend',
        data: attendanceTrend.trendData.map((point) => ({
          date: point.date,
          value: point.count,
        })),
        widgetType: WidgetType.CHART,
      },
      {
        chartType: 'bar',
        title: 'Member Demographics',
        data: (
          await this.memberReportsService.getMemberDemographicsReport(branchId)
        ).ageDistribution,
        widgetType: WidgetType.CHART,
      },
    ];
  } catch (error: unknown) {
    const err = error as Error;
    this.logger.error(`Error generating pastoral dashboard: ${err.message}`, err.stack);
    // Initialize with empty arrays if there's an error
    dashboardData.kpiCards = [];
    dashboardData.charts = [];
  }
}

private async generateAdminDashboard(
  dashboardData: DashboardData,
  branchId: string,
  startDate: Date,
  endDate: Date,
): Promise<void> {
  try {
    // Get member count
    const totalMembers = await this.prisma.member.count({
      where: { branchId },
    });

    // Get form submissions count
    const formSubmissions = await this.getFormSubmissionsByForm(
      branchId,
      startDate,
      endDate,
    );

    // Get upcoming events count
    const upcomingEvents = await Promise.resolve(5); // Placeholder count

    // Add KPI cards
    dashboardData.kpiCards = [
      {
        title: 'Total Members',
        value: totalMembers.toString(),
        icon: 'users',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'Form Submissions',
        value: formSubmissions.reduce((sum, form) => sum + form.count, 0).toString(),
        icon: 'file-text',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'Upcoming Events',
        value: upcomingEvents.toString(),
        icon: 'calendar',
        widgetType: WidgetType.KPI_CARD,
      },
    ];

    // Add charts
    dashboardData.charts = [
      {
        chartType: 'bar',
        title: 'Form Submissions by Type',
        data: formSubmissions,
        widgetType: WidgetType.CHART,
      },
      {
        chartType: 'pie',
        title: 'Member Demographics',
        data: (await this.memberReportsService.getMemberDemographicsReport(branchId)).genderDistribution,
        widgetType: WidgetType.CHART,
      },
    ];
  } catch (error: unknown) {
    const err = error as Error;
    this.logger.error(`Error generating admin dashboard: ${err.message}`, err.stack);
    // Initialize with empty arrays if there's an error
    dashboardData.kpiCards = [];
    dashboardData.charts = [];
  }
}

private async generateFinanceDashboard(
  dashboardData: DashboardData,
  branchId: string,
  startDate: Date,
  endDate: Date,
): Promise<void> {
  try {
    // Get financial reports
    const contributionsReport = await this.financialReportsService.getContributionsReport(
      branchId,
      startDate,
      endDate,
    );

    const budgetReport = await this.financialReportsService.getBudgetReport(
      branchId,
      startDate,
      endDate,
    );

    // Add KPI cards
    dashboardData.kpiCards = [
      {
        title: 'Total Contributions',
        value: contributionsReport.totalAmount.toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD',
        }),
        percentChange: contributionsReport.percentChangeFromPreviousPeriod,
        icon: 'dollar-sign',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'Budget Variance',
        value: budgetReport.variance.toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD',
        }),
        percentChange: budgetReport.percentVariance,
        icon: 'trending-up',
        widgetType: WidgetType.KPI_CARD,
      },
      {
        title: 'Contribution Count',
        value: contributionsReport.contributionCount.toString(),
        icon: 'credit-card',
        widgetType: WidgetType.KPI_CARD,
      },
    ];

    // Add charts
    dashboardData.charts = [
      {
        chartType: 'line',
        title: 'Contribution Trend',
        data: contributionsReport.trendData,
        widgetType: WidgetType.CHART,
      },
      {
        chartType: 'pie',
        title: 'Contributions by Fund',
        data: contributionsReport.fundBreakdown,
        widgetType: WidgetType.CHART,
      },
      {
        chartType: 'bar',
        title: 'Budget vs Actual',
        data: budgetReport.categories.map((category) => ({
          name: category.name,
          budgeted: category.budgeted,
          actual: category.actual,
        })),
        widgetType: WidgetType.CHART,
      },
    ];
  } catch (error: unknown) {
    const err = error as Error;
    this.logger.error(`Error generating finance dashboard: ${err.message}`, err.stack);
    // Initialize with empty arrays if there's an error
    dashboardData.kpiCards = [];
    dashboardData.charts = [];
  }
    endDate: Date,
  ): Promise<void> {
    try {
      // Get ministry/group data
      // Placeholder: In a real implementation, this would use the Prisma group model
      // For now, we'll use a placeholder implementation
      const groupCount = await Promise.resolve(12); // Placeholder count

      // Get group attendance
      const groupAttendance = await this.getGroupAttendance(
        branchId,
        startDate,
        endDate,
      );

      // Add KPI cards
      dashboardData.kpiCards = [
        {
          title: 'Total Groups',
          value: groupCount.toString(),
          icon: 'users',
          widgetType: WidgetType.KPI_CARD,
        },
        {
          title: 'Active Groups',
          value: groupAttendance.activeGroups.toString(),
          icon: 'activity',
          widgetType: WidgetType.KPI_CARD,
        },
        {
          title: 'Total Group Members',
          value: groupAttendance.totalMembers.toString(),
          icon: 'user',
          widgetType: WidgetType.KPI_CARD,
        },
      ];

      // Add charts
      dashboardData.charts = [
        {
          chartType: 'bar',
          title: 'Group Attendance',
          data: groupAttendance.groups,
          widgetType: WidgetType.CHART,
        },
        {
          chartType: 'pie',
          title: 'Group Types Distribution',
          data: await this.getGroupTypeDistribution(branchId),
          widgetType: WidgetType.CHART,
        },
      ];
    } catch (error: unknown) {
      const err = error as Error;
      this.logger.error(`Error generating ministry dashboard: ${err.message}`, err.stack);
      // Initialize with empty arrays if there's an error
      dashboardData.kpiCards = [];
      dashboardData.charts = [];
    }
  }

  private async getFormSubmissionsByForm(
    branchId: string,
    startDate: Date,
    endDate: Date,
  ): Promise<any[]> {
    // Placeholder: In a real implementation, this would use the Prisma form model
    // For now, we'll return placeholder data
    await Promise.resolve(); // Just to have an await expression

    return [
      { name: 'Prayer Request', count: 24 },
      { name: 'Visitor Registration', count: 18 },
      { name: 'Volunteer Application', count: 7 },
      { name: 'Counseling Request', count: 5 },
    ];
  }

  private async getGroupAttendance(
    _branchId: string,
    _startDate: Date,
    _endDate: Date,
  ): Promise<any> {
    // This would be implemented based on your group attendance tracking system
    // For now, we'll return placeholder data

    return {
      activeGroups: 12,
      totalMembers: 245,
      groups: [
        { name: 'Sunday School', attendance: 45, capacity: 60 },
        { name: 'Youth Group', attendance: 32, capacity: 40 },
        { name: "Men's Fellowship", attendance: 28, capacity: 40 },
        { name: "Women's Ministry", attendance: 36, capacity: 40 },
        { name: 'Prayer Meeting', attendance: 22, capacity: 30 },
      ],
    };
  }

  private async getGroupTypeDistribution(_branchId: string): Promise<any[]> {
    // This would be implemented based on your group type system
    // For now, we'll return placeholder data
    await Promise.resolve(); // Just to have an await expression

    return [
      { name: 'Bible Study', count: 5 },
      { name: 'Fellowship', count: 4 },
      { name: 'Ministry Team', count: 6 },
      { name: 'Support Group', count: 2 },
      { name: 'Committee', count: 3 },
    ];
  }
}
