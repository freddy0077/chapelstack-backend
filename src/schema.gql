# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AbsenceAlertConfigInput {
  absenceThresholdDays: Int!
  branchId: String!
  sendEmailAlerts: Boolean! = true
  sendSmsAlerts: Boolean! = false
}

type AbsenceAlertResult {
  count: Int!
  members: [AbsentMember!]!
  success: Boolean!
}

type AbsentMember {
  email: String
  firstName: String!
  id: String!
  lastAttendance: DateTime
  lastName: String!
  phone: String
}

type ActivityEngagement {
  recentEvents: [EventInfo!]!
  upcomingEvents: [EventInfo!]!
}

type ActivityMetadata {
  details: String
  entityId: String
  entityType: String
}

type ActivityStatsDto {
  recentEvents: [EventDto!]!
  upcomingEvents: [EventDto!]!
}

type AgeDistribution {
  ageGroup: String!
  count: Float!
  percentage: Float!
}

input AllMessagesFilterInput {
  branchId: String
  endDate: DateTime
  organisationId: String
  startDate: DateTime
  types: [String!]
}

type Announcement {
  content: String!
  endDate: DateTime!
  id: ID!
  isActive: Boolean!
  key: String!
  startDate: DateTime!
  targetBranchIds: [ID!]
  targetRoleIds: [ID!]
  title: String!
}

type AnnouncementInfo {
  id: String!
  startDate: DateTime!
  title: String!
}

type AnnouncementItem {
  author: String
  content: String!
  date: DateTime!
  id: String!
  priority: String
  title: String!
}

type Announcements {
  announcements: [AnnouncementInfo!]!
}

type AnnouncementsWidget {
  announcements: [AnnouncementItem!]!
  title: String!
  widgetType: WidgetType!
}

input AssignRfidCardInput {
  memberId: ID!
  rfidCardId: String!
}

type AttendanceByDemographicsStat {
  count: Float!
  group: String!
}

type AttendanceByEventStat {
  count: Float!
  eventType: String!
}

input AttendanceCheckOutInput {
  checkOutTime: DateTime
  recordId: ID!
}

type AttendanceDataPoint {
  count: Float!
  date: DateTime!
  percentChange: Float
}

input AttendanceFilterInput {
  branchId: ID
  checkInMethod: String
  endDate: DateTime
  eventId: ID
  memberId: ID
  sessionId: ID
  startDate: DateTime
  visitorNameContains: String
}

type AttendanceFrequencyStat {
  count: Float!
  label: String!
}

type AttendanceOverview {
  totalAttendance: Float!
}

type AttendanceRecord {
  branch: Branch
  checkInMethod: String!
  checkInTime: DateTime!
  checkOutTime: DateTime
  createdAt: DateTime!
  event: Event
  id: ID!
  member: Member
  notes: String
  recordedBy: User
  session: AttendanceSession
  updatedAt: DateTime!
  visitorEmail: String
  visitorName: String
  visitorPhone: String
}

type AttendanceReport {
  branchId: String
  charts: [AttendanceReportChart!]
  data: [AttendanceReportData!]!
  downloadUrl: String
  events: [AttendanceReportEvent!]
  format: AttendanceReportFormat!
  generatedAt: String!
  generatedBy: String!
  id: String!
  members: [AttendanceReportMember!]
  organisationId: String
  reportType: AttendanceReportType!
  sessions: [AttendanceReportSession!]
  summary: AttendanceReportSummary!
  title: String!
}

type AttendanceReportChart {
  colors: [String!]
  data: [Float!]!
  labels: [String!]!
  title: String!
  type: String!
}

type AttendanceReportData {
  averageAttendance: Float!
  firstTimeVisitors: Int!
  growthRate: Float
  period: String!
  retentionRate: Float
  totalAttendance: Int!
  uniqueMembers: Int!
  visitors: Int!
}

type AttendanceReportEvent {
  attendanceRate: Float!
  category: String
  id: String!
  memberAttendance: Int!
  startDate: String!
  title: String!
  totalAttendance: Int!
  visitorAttendance: Int!
}

enum AttendanceReportFormat {
  CSV
  EXCEL
  JSON
  PDF
}

enum AttendanceReportGroupBy {
  AGE_GROUP
  BRANCH
  DAY
  EVENT_TYPE
  GENDER
  MONTH
  QUARTER
  SESSION_TYPE
  WEEK
  YEAR
}

input AttendanceReportInput {
  branchId: String
  endDate: String!
  eventIds: [String!]
  format: AttendanceReportFormat! = JSON
  groupBy: AttendanceReportGroupBy
  includeCharts: Boolean! = false
  includeEventDetails: Boolean! = false
  includeMemberDetails: Boolean! = false
  includeSessionDetails: Boolean! = false
  includeStatistics: Boolean! = false
  includeVisitors: Boolean! = false
  memberIds: [String!]
  organisationId: String
  reportType: AttendanceReportType!
  sessionIds: [String!]
  startDate: String!
  title: String
}

type AttendanceReportMember {
  attendanceCount: Int!
  attendanceDates: [String!]!
  attendanceRate: Float!
  email: String
  firstName: String!
  id: String!
  lastAttendance: String
  lastName: String!
}

type AttendanceReportSession {
  attendanceRate: Float!
  date: String!
  id: String!
  memberAttendance: Int!
  name: String!
  totalAttendance: Int!
  type: String
  visitorAttendance: Int!
}

type AttendanceReportSummary {
  averageEventAttendance: Float!
  averageSessionAttendance: Float!
  endDate: String!
  firstTimeVisitors: Int!
  memberRetentionRate: Float!
  overallGrowthRate: Float!
  startDate: String!
  totalAttendance: Int!
  totalEvents: Int!
  totalSessions: Int!
  totalVisitors: Int!
  uniqueMembers: Int!
  visitorConversionRate: Float!
}

enum AttendanceReportType {
  COMPARATIVE
  DETAILED
  EVENT_ANALYSIS
  MEMBER_ANALYSIS
  SESSION_ANALYSIS
  SUMMARY
  TRENDS
}

type AttendanceSession {
  branchId: String
  createdAt: DateTime!
  date: DateTime!
  description: String
  endTime: DateTime
  id: ID!
  latitude: Float
  location: String
  longitude: Float
  name: String!
  organisationId: String
  startTime: DateTime!
  status: String!
  type: String!
  updatedAt: DateTime!
}

type AttendanceStats {
  BY_AGE_GROUP: [AttendanceByDemographicsStat!]
  BY_BRANCH: [AttendanceByDemographicsStat!]
  BY_EVENT_TYPE: [AttendanceByEventStat!]
  BY_GENDER: [AttendanceByDemographicsStat!]
  FIRST_TIME_VISITORS: [FirstTimeVisitorsStat!]
  FREQUENCY: [AttendanceFrequencyStat!]
  GROWTH_RATE: [GrowthRateStat!]
  RETENTION_RATE: [RetentionRateStat!]
  TOTAL_ATTENDANCE: [TotalAttendanceStat!]
  UNIQUE_MEMBERS: [UniqueMembersStat!]
  VISITORS: [VisitorsStat!]
  branchId: String!
  endDate: String!
  period: AttendanceStatsPeriod!
  startDate: String!
}

type AttendanceStatsDto {
  totalAttendance: Float!
}

input AttendanceStatsInput {
  branchId: String
  endDate: String!
  organisationId: String
  period: AttendanceStatsPeriod! = WEEKLY
  sessionTypeId: String
  startDate: String!
  statsTypes: [AttendanceStatsType!]! = [TOTAL_ATTENDANCE]
}

enum AttendanceStatsPeriod {
  DAILY
  MONTHLY
  QUARTERLY
  WEEKLY
  YEARLY
}

enum AttendanceStatsType {
  FIRST_TIME_VISITORS
  GROWTH_RATE
  RETENTION_RATE
  TOTAL_ATTENDANCE
  UNIQUE_MEMBERS
  VISITORS
}

type AttendanceTrendData {
  averageAttendance: Float!
  branchId: ID
  branchName: String
  endDate: DateTime!
  eventTypeId: String
  eventTypeName: String
  organisationId: ID
  percentChangeFromPreviousPeriod: Float
  startDate: DateTime!
  totalAttendance: Float!
  trendData: [AttendanceDataPoint!]!
}

type AuditLog {
  action: String!
  branch: Branch
  branchId: ID
  createdAt: DateTime!
  description: String!
  entityId: String
  entityType: String!
  id: ID!
  ipAddress: String
  metadata: JSON
  user: AuthUser
  userAgent: String
  userId: ID
}

input AuditLogFilterInput {
  action: String
  branchId: ID
  createdAfter: String
  createdBefore: String
  descriptionContains: String
  entityId: String
  entityType: String
  userId: ID
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: UserProfile!
}

type AuthUser {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: ID!
  isActive: Boolean!
  isEmailVerified: Boolean!
  lastLoginAt: DateTime
  lastName: String
  phoneNumber: String
  roles: [Role]
  updatedAt: DateTime!
  userBranches: [UserBranch]
}

type Backup {
  completedAt: DateTime
  createdAt: DateTime!
  description: String
  duration: Float
  errorDetails: JSON
  filePath: String
  fileSize: Float
  id: ID!
  metadata: JSON
  status: BackupStatus!
  type: BackupType!
  user: AuthUser
  userId: ID
}

input BackupFilterInput {
  createdAfter: String
  createdBefore: String
  endDate: String
  id: ID
  startDate: String
  status: BackupStatus
  type: BackupType
  userId: ID
}

"""Status of a backup operation"""
enum BackupStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

"""Type of backup operation"""
enum BackupType {
  FULL
  INCREMENTAL
  MANUAL
  SCHEDULED
}

enum BirthdayRangeEnum {
  THIS_MONTH
  THIS_WEEK
  TODAY
}

type Branch {
  address: String
  branchSettings: BranchSettings!
  city: String
  country: String
  createdAt: DateTime!
  email: String
  establishedAt: DateTime
  id: ID!
  incomingTransfers(paginationInput: PaginationInput): PaginatedTransferRequests!
  isActive: Boolean!
  location: String
  name: String!
  organisationId: String
  outgoingTransfers(paginationInput: PaginationInput): PaginatedTransferRequests!
  phoneNumber: String
  postalCode: String
  settings: BranchSettings!
  state: String
  statistics: BranchStatistics!
  updatedAt: DateTime!
  website: String
}

type BranchActivity {
  branchId: String!
  description: String!
  id: ID!
  metadata: ActivityMetadata
  timestamp: DateTime!
  type: String!
  user: User
}

type BranchAdminDto {
  id: String!
  name: String!
}

type BranchAnnouncementsDto {
  announcements: [EventDto!]!
}

type BranchDashboardDataDto {
  activityStats: ActivityStatsDto!
  attendanceStats: AttendanceStatsDto!
  branchAnnouncements: BranchAnnouncementsDto!
  branchInfo: BranchInfoDto!
  financeStats: FinanceStatsDto!
  memberStats: MemberStatsDto!
  sacramentStats: SacramentStatsDto!
  systemStatus: SystemStatusDto!
}

input BranchFilterInput {
  """Filter by city (case-insensitive, partial match)"""
  cityContains: String

  """Filter by country (case-insensitive, partial match)"""
  countryContains: String

  """Filter by email (case-insensitive, partial match)"""
  emailContains: String

  """Filter by branch ID"""
  id: String

  """Filter by active status"""
  isActive: Boolean

  """Filter by name (case-insensitive, partial match)"""
  nameContains: String

  """Filter by organisation ID"""
  organisationId: String

  """Filter by state (case-insensitive, partial match)"""
  stateContains: String
}

type BranchInfo {
  id: String!
  name: String!
  organisation: String
  status: String
}

type BranchInfoDto {
  admins: [BranchAdminDto!]!
  id: String!
  isActive: Boolean!
  name: String!
  organisation: String
}

type BranchProfile {
  address: String
  city: String
  country: String
  createdAt: DateTime!
  email: String
  establishedAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  phoneNumber: String
  postalCode: String
  state: String
  updatedAt: DateTime!
  website: String
}

type BranchSetting {
  """ID of the branch these settings belong to"""
  branchId: ID!
  createdAt: DateTime!
  id: ID!
  key: String!
  updatedAt: DateTime!
  value: String!
}

type BranchSettings {
  allowMemberTransfers: Boolean!
  allowResourceSharing: Boolean!
  attendanceReportingLevel: String!
  branchId: ID!
  brandingSettings: BrandingSettings
  createdAt: DateTime
  currency: String
  financialReportingLevel: String!
  id: ID
  language: String
  memberDataVisibility: String!
  notificationSettings: NotificationSettings
  timezone: String
  updatedAt: DateTime
  visibilityToOtherBranches: String!
}

type BranchStatistics {
  """Number of active members in this branch."""
  activeMembers: Int!

  """Annual budget for this branch."""
  annualBudget: Float

  """Average weekly attendance in this branch."""
  averageWeeklyAttendance: Int

  """Number of baptisms year-to-date in this branch."""
  baptismsYTD: Int

  """Number of confirmations year-to-date in this branch."""
  confirmationsYTD: Int

  """Number of first communions year-to-date in this branch."""
  firstCommunionsYTD: Int

  """Number of inactive members in this branch."""
  inactiveMembers: Int!

  """Statistics for the previous month."""
  lastMonth: BranchStatistics

  """Number of marriages year-to-date in this branch."""
  marriagesYTD: Int

  """
  Number of new members who joined this branch in the relevant period (current or last month).
  """
  newMembersInPeriod: Int!

  """Total number of families in this branch."""
  totalFamilies: Int

  """Total number of members in this branch."""
  totalMembers: Int!

  """Total number of ministries in this branch."""
  totalMinistries: Int

  """Year-to-date expenses for this branch."""
  ytdExpenses: Float

  """Year-to-date income for this branch."""
  ytdIncome: Float
}

type BranchesSummary {
  branches: [BranchInfo!]!
  total: Float!
}

type BrandingSettings {
  fontFamily: String!
  primaryColor: String!
  secondaryColor: String!
}

input BrandingSettingsInput {
  fontFamily: String!
  primaryColor: String!
  secondaryColor: String!
}

type Budget {
  branchId: String
  description: String
  endDate: DateTime!
  fiscalYear: Int!
  fundId: String!
  id: String!
  ministryId: String
  name: String!
  notes: String
  organisationId: String
  startDate: DateTime!
  status: String!
  totalAmount: Float!
  totalSpent: Float!
}

input CardScanInput {
  branchId: ID
  cardId: String!
  notes: String
  recordedById: ID
  scanMethod: String = "RFID"
  scanTime: DateTime
  sessionId: ID!
}

type CareRequest {
  assignedPastorId: String
  branchId: String
  completionDate: DateTime
  createdAt: DateTime!
  createdBy: String!
  description: String!
  id: String!
  memberId: String!
  notes: String
  organisationId: String!
  priority: CareRequestPriority!
  requestDate: DateTime!
  requestType: CareRequestType!
  requesterId: String!
  status: CareRequestStatus!
  title: String!
  updatedAt: DateTime!
}

input CareRequestFilterInput {
  assignedPastorId: String
  branchId: String
  endDate: String
  memberId: String
  organisationId: String!
  priority: CareRequestPriority
  requestType: CareRequestType
  startDate: String
  status: CareRequestStatus
}

enum CareRequestPriority {
  EMERGENCY
  HIGH
  LOW
  MEDIUM
  URGENT
}

enum CareRequestStatus {
  ASSIGNED
  CANCELLED
  CLOSED
  COMPLETED
  IN_PROGRESS
  SUBMITTED
}

enum CareRequestType {
  BEREAVEMENT
  COUNSELING
  CRISIS_SUPPORT
  FAMILY_CRISIS
  FINANCIAL_ASSISTANCE
  GENERAL_SUPPORT
  HOME_VISIT
  HOSPITAL_VISIT
  PRAYER_REQUEST
  SPIRITUAL_GUIDANCE
}

type Category {
  createdAt: String!
  id: ID!
  name: String!
  updatedAt: String!
}

type ChartData {
  chartType: String!
  data: JSON!
  title: String!
  widgetType: WidgetType!
}

type CheckInEventStats {
  _count: Int!
  eventId: ID!
}

input CheckInInput {
  branchId: String!
  checkedInById: String!
  childId: String!
  eventId: String
  guardianIdAtCheckIn: String!
  notes: String
}

type CheckInRecord {
  branchId: String!
  checkedInAt: DateTime!
  checkedInById: String!
  checkedOutAt: DateTime
  checkedOutById: String
  childId: String!
  createdAt: DateTime!
  eventId: String
  guardianIdAtCheckIn: String!
  guardianIdAtCheckOut: String
  id: ID!
  notes: String
  updatedAt: DateTime!
}

type CheckInStatsOutput {
  checkInsByEvent: [CheckInEventStats!]!
  totalCheckIns: Int!
  totalCheckOuts: Int!
  uniqueChildrenCount: Int!
}

type Child {
  age: Float
  allergies: String
  branchId: String!
  createdAt: DateTime!
  dateOfBirth: DateTime!
  emergencyContactName: String!
  emergencyContactPhone: String!
  firstName: String!
  fullName: String
  gender: String
  guardians: [Guardian!]!
  id: ID!
  lastName: String!
  notes: String
  photoConsent: Boolean!
  recentCheckIns: [CheckInRecord!]!
  specialNeeds: String
  updatedAt: DateTime!
}

input ChildCheckOutInput {
  checkInRecordId: String!
  checkedOutById: String!
  guardianIdAtCheckOut: String!
  notes: String
}

input ChildFilterInput {
  branchId: String
  dateOfBirthFrom: DateTime
  dateOfBirthTo: DateTime
  firstName: String
  gender: String
  lastName: String
}

type ChildGuardianRelation {
  childId: String!
  createdAt: DateTime!
  guardianId: String!
  id: ID!
  relationship: String!
  updatedAt: DateTime!
}

type ChildrenEvent {
  ageRange: String
  branchId: String!
  capacity: Int
  createdAt: DateTime!
  description: String
  endDateTime: DateTime!
  id: ID!
  location: String!
  name: String!
  startDateTime: DateTime!
  updatedAt: DateTime!
  volunteers: [ChildrenMinistryVolunteer!]!
  volunteersNeeded: Int
}

type ChildrenMinistryVolunteer {
  backgroundCheckStatus: String
  branchId: String
  createdAt: DateTime!
  id: ID!
  memberId: String!
  role: String!
  trainingCompleted: Boolean!
  upcomingEvents: [ChildrenEvent!]!
  updatedAt: DateTime!
}

type CommunicationChannelStats {
  channel: String!
  deliveryRate: Int!
  messagesSent: Int!
  openRate: Int
}

type CommunicationStatsEntity {
  activeTemplates: Int!
  averageResponseTime: Int
  deliveryRate: Int!
  emailStatusCounts: [MessageStatusCount!]!
  messagesByDate: [MessageTimeSeriesData!]!
  smsStatusCounts: [MessageStatusCount!]!
  totalEmailsSent: Int!
  totalNotifications: Int!
  totalSmsSent: Int!
}

input CommunicationStatsFilterInput {
  branchId: ID
  channels: [String!]
  endDate: String
  groupBy: String
  organisationId: ID
  startDate: String
  statuses: [String!]
}

input CompleteOnboardingStepInput {
  address: String
  branchId: ID!
  city: String
  country: String
  description: String
  email: String
  name: String
  phoneNumber: String
  selectedModules: [String!]
  state: String
  stepKey: OnboardingStep!
  website: String
  zipCode: String
}

"""Status of the content/sermon"""
enum ContentStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

type Contribution {
  amount: Float!
  anonymous: Boolean
  branchId: String
  contributionType: ContributionType!
  contributionTypeId: String!
  date: DateTime!
  fund: Fund!
  fundId: String!
  id: String!
  member: Member
  memberId: String
  notes: String
  organisationId: String
  paymentMethod: PaymentMethod!
  paymentMethodId: String!
  pledgeId: String
}

type ContributionType {
  branchId: String
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  organisationId: String
}

type CounselingSession {
  actualDate: DateTime
  branchId: String
  counselorId: String!
  createdAt: DateTime!
  createdBy: String!
  description: String
  duration: Int!
  followUpDate: DateTime
  id: String!
  isConfidential: Boolean!
  memberId: String!
  organisationId: String!
  primaryMemberId: String!
  scheduledDate: DateTime!
  sessionType: CounselingSessionType!
  status: CounselingSessionStatus!
  title: String!
  updatedAt: DateTime!
}

input CounselingSessionFilterInput {
  branchId: String
  counselorId: String
  endDate: String
  isConfidential: Boolean
  memberId: String
  organisationId: String!
  sessionType: CounselingSessionType
  startDate: String
  status: CounselingSessionStatus
}

enum CounselingSessionStatus {
  CANCELLED
  COMPLETED
  IN_PROGRESS
  NO_SHOW
  RESCHEDULED
  SCHEDULED
}

enum CounselingSessionType {
  ADDICTION
  COUPLES
  CRISIS
  FAMILY
  GENERAL
  GRIEF
  GROUP
  INDIVIDUAL
  MARRIAGE
  SPIRITUAL
}

type CpuUsage {
  system: Float!
  user: Float!
}

type CpuUsageDto {
  system: Float!
  user: Float!
}

input CreateAnnouncementInput {
  content: String!
  endDate: String!
  startDate: String!
  targetBranchIds: [ID!]
  targetRoleIds: [ID!]
  title: String!
}

input CreateAttendanceSessionInput {
  branchId: String
  date: DateTime!
  description: String
  endTime: DateTime
  latitude: Float
  location: String
  longitude: Float
  name: String!
  organisationId: String!
  startTime: DateTime!
  status: String = "PLANNED"
  type: String!
}

input CreateAuditLogInput {
  action: String!
  branchId: ID
  description: String!
  entityId: String
  entityType: String!
  ipAddress: String
  metadata: JSON
  userAgent: String
  userId: ID
}

input CreateBackupInput {
  description: String
  metadata: JSON
  type: BackupType!
  userId: ID
}

input CreateBranchAdminInput {
  branchId: ID!
  email: String!
  firstName: String!
  lastName: String!
  organisationId: ID!
  password: String!
}

input CreateBranchInput {
  address: String
  city: String
  country: String
  email: String
  establishedAt: DateTime
  isActive: Boolean = true
  name: String!
  organisationId: String!
  phoneNumber: String
  postalCode: String
  state: String
  website: String
}

input CreateBudgetInput {
  branchId: String
  description: String
  endDate: DateTime!
  fiscalYear: Int!
  fundId: String!
  ministryId: String
  name: String!
  notes: String
  organisationId: String
  startDate: DateTime!
  status: String!
  totalAmount: Float!
}

input CreateCareRequestInput {
  assignedPastorId: String
  branchId: String
  description: String!
  memberId: String!
  notes: String
  organisationId: String!
  priority: CareRequestPriority! = MEDIUM
  requestDate: String!
  requestType: CareRequestType!
  status: CareRequestStatus! = SUBMITTED
  title: String!
}

input CreateCategoryInput {
  name: String!
}

input CreateChildGuardianRelationInput {
  childId: String!
  guardianId: String!
  relationship: String!
}

input CreateChildInput {
  allergies: String
  branchId: String!
  dateOfBirth: DateTime!
  emergencyContactName: String!
  emergencyContactPhone: String!
  firstName: String!
  gender: String
  lastName: String!
  notes: String
  photoConsent: Boolean! = false
  specialNeeds: String
}

input CreateChildrenEventInput {
  ageRange: String
  branchId: String!
  capacity: Int
  description: String
  endDateTime: DateTime!
  location: String!
  name: String!
  startDateTime: DateTime!
  volunteersNeeded: Int
}

input CreateContributionInput {
  amount: Float!
  anonymous: Boolean
  branchId: String
  contributionTypeId: String!
  date: DateTime!
  fundId: String!
  memberId: String
  notes: String
  organisationId: String
  paymentMethodId: String!
  pledgeId: String
}

input CreateCounselingSessionInput {
  branchId: String
  counselorId: String!
  description: String
  duration: Float
  followUpDate: String
  homework: String
  isConfidential: Boolean!
  isRecurring: Boolean
  location: String
  memberId: String!
  nextSteps: String
  notes: String
  organisationId: String!
  privateNotes: String
  progressNotes: String
  recurringPattern: String
  scheduledDate: String!
  sessionNotes: String
  sessionNumber: Float
  sessionType: CounselingSessionType!
  status: CounselingSessionStatus! = SCHEDULED
  title: String!
  topic: String
  totalSessions: Float
}

input CreateDataExportInput {
  description: String
  entityType: String!
  metadata: JSON
  userId: ID
}

input CreateDataImportInput {
  description: String
  entityType: String!
  filePath: String
  metadata: JSON
  userId: ID
}

input CreateEmailTemplateInput {
  bodyHtml: String!
  bodyText: String
  branchId: String
  description: String
  isActive: Boolean
  name: String!
  organisationId: String
  subject: String!
}

input CreateEventInput {
  branchId: String
  category: String
  description: String
  endDate: DateTime
  location: String
  organisationId: String
  startDate: DateTime!
  title: String!
}

input CreateExpenseCategoryInput {
  branchId: String
  description: String
  name: String!
  organisationId: String
}

input CreateExpenseInput {
  amount: Float!
  branchId: String
  budgetId: String
  date: DateTime!
  description: String!
  expenseCategoryId: String!
  fundId: String!
  invoiceNumber: String
  organisationId: String
  paymentMethodId: String!
  receiptNumber: String
  vendorContact: String
  vendorId: String
  vendorName: String
}

input CreateFamilyInput {
  address: String
  city: String
  country: String
  customFields: JSON
  memberIds: [ID!]
  name: String!
  phoneNumber: String
  postalCode: String
  state: String
}

input CreateFamilyRelationshipInput {
  familyId: ID
  memberId: ID!
  relatedMemberId: ID!
  relationshipType: FamilyRelationshipType!
}

input CreateFollowUpReminderInput {
  assignedToId: String!
  branchId: String
  description: String
  dueDate: String!
  followUpType: FollowUpType!
  memberId: String!
  notes: String
  organisationId: String!
  reminderDate: String
  status: FollowUpStatus! = PENDING
  title: String!
}

input CreateFormFieldInput {
  conditionalLogic: JSON
  defaultValue: String
  formId: String!
  helpText: String
  isRequired: Boolean = false
  isUnique: Boolean = false
  label: String!
  options: JSON
  order: Float!
  placeholder: String
  type: FormFieldType!
  validations: JSON
  width: Float = 100
}

input CreateFormFieldValueInput {
  fieldId: String!
  fileUrl: String
  value: String
}

input CreateFormInput {
  branchId: String
  description: String
  enableCaptcha: Boolean = false
  expiresAt: DateTime
  isPublic: Boolean = false
  notifyEmails: [String!] = []
  redirectUrl: String
  slug: String
  status: FormStatus = DRAFT
  successMessage: String
  title: String!
}

input CreateFormSubmissionInput {
  branchId: String
  fieldValues: [CreateFormFieldValueInput!]!
  formId: String!
  ipAddress: String
  submittedById: String
  userAgent: String
}

input CreateFundInput {
  branchId: String
  description: String
  isActive: Boolean
  name: String!
  organisationId: String
}

input CreateGuardianInput {
  address: String
  branchId: String!
  canPickup: Boolean! = true
  email: String
  firstName: String
  isPrimaryGuardian: Boolean! = false
  lastName: String
  memberId: String
  notes: String
  phone: String!
  relationship: String!
}

input CreateLicenseInput {
  contactEmail: String
  contactPhone: String
  expiryDate: DateTime!
  features: JSON
  key: String!
  maxBranches: Float
  maxUsers: Float
  notes: String
  organizationName: String
  startDate: DateTime!
  status: LicenseStatus!
  type: LicenseType!
}

input CreateMediaItemInput {
  branchId: String!
  description: String
  fileSize: Float!
  fileUrl: String!
  mimeType: String!
  title: String!
  type: String!
  uploadedBy: String!
}

input CreateMemberInput {
  address: String
  baptismDate: DateTime
  branchId: ID
  city: String
  confirmationDate: DateTime
  country: String
  customFields: JSON
  dateOfBirth: DateTime
  email: String
  employerName: String
  firstName: String!
  gender: String
  lastName: String!
  maritalStatus: MaritalStatus
  membershipDate: DateTime
  middleName: String
  notes: String
  occupation: String
  organisationId: ID
  parentId: ID
  phoneNumber: String
  postalCode: String
  privacySettings: JSON
  spouseId: ID
  state: String
  status: MemberStatus! = ACTIVE
  userId: ID
}

input CreateMinistryInput {
  branchId: String
  description: String
  name: String!
  organisationId: ID
  parentId: String
  status: String!
  type: String!
}

input CreateNotificationInput {
  branchId: String
  link: String
  memberId: String
  message: String!
  organisationId: String
  title: String!
  type: NotificationType!
  userId: String!
}

input CreateOrganisationInput {
  accentColor: String
  address: String
  brandFont: String
  city: String
  country: String
  currency: String
  denomination: String
  description: String
  email: String
  faviconUrl: String
  fontFamily: String
  foundingYear: Float
  logoUrl: String
  missionStatement: String
  name: String!
  phoneNumber: String
  primaryColor: String
  secondaryColor: String
  size: String
  slogan: String
  socialHandle: String
  state: String
  timezone: String
  vision: String
  website: String
  zipCode: String
}

input CreateOrganizationSubscriptionInput {
  authorizationCode: String
  metadata: JSON
  startDate: String
}

input CreatePastoralVisitInput {
  branchId: String
  description: String
  followUpDate: String
  location: String
  memberId: String!
  notes: String
  organisationId: String!
  pastorId: String!
  scheduledDate: String!
  status: PastoralVisitStatus! = SCHEDULED
  title: String!
  visitType: PastoralVisitType!
}

input CreatePermissionInput {
  action: String!
  description: String
  subject: String!
}

input CreatePlanDto {
  amount: Float!
  currency: String! = "NGN"
  description: String
  features: [String!]
  interval: SubscriptionInterval! = MONTHLY
  intervalCount: Int! = 1
  invoiceLimit: Int
  isActive: Boolean! = true
  metadata: JSON
  name: String!
  organisationId: String!
  sendInvoices: Boolean! = true
  sendSms: Boolean! = false
  trialPeriodDays: Int
}

input CreatePledgeInput {
  amount: Float!
  branchId: String
  endDate: DateTime
  frequency: String!
  fundId: String!
  memberId: String!
  notes: String
  organisationId: String
  startDate: DateTime!
  status: String!
}

input CreatePrayerRequestInput {
  branchId: ID!
  memberId: ID!
  organisationId: ID!
  requestText: String!
}

input CreateRoleInput {
  description: String
  name: String!
}

input CreateRoleWithPermissionsInput {
  description: String
  name: String!
  permissionIds: [ID!]!
}

input CreateSacramentalRecordInput {
  branchId: String!
  certificateNumber: String
  certificateUrl: String
  dateOfSacrament: DateTime!
  godparent1Name: String
  godparent2Name: String
  locationOfSacrament: String!
  memberId: String!
  notes: String
  officiantId: String
  officiantName: String!
  organisationId: String
  sacramentType: SacramentType!
  sponsorName: String
  witness1Name: String
  witness2Name: String
}

input CreateSeriesInput {
  artworkUrl: String
  branchId: String!
  description: String
  endDate: String
  startDate: String
  title: String!
}

input CreateSermonInput {
  audioUrl: String
  branchId: String!
  categoryId: String
  datePreached: String!
  description: String
  duration: Float
  mainScripture: String
  notesUrl: String
  organisationId: String
  seriesId: String
  speakerId: String!
  status: String
  tags: [String!]
  title: String!
  transcriptText: String
  transcriptUrl: String
  videoUrl: String
}

input CreateSettingInput {
  branchId: ID
  key: String!
  value: String!
}

input CreateSmallGroupInput {
  branchId: String
  description: String
  location: String
  maximumCapacity: Int
  meetingSchedule: String
  ministryId: String
  name: String!
  organisationId: String
  status: String!
  type: String!
}

input CreateSpeakerInput {
  bio: String
  branchId: String!
  imageUrl: String
  memberId: String
  name: String!
}

input CreateSpiritualMilestoneInput {
  additionalDetails: JSON
  date: DateTime!
  description: String
  location: String
  memberId: ID!
  performedBy: String
  type: MilestoneType!
}

input CreateSubscriptionInput {
  authorizationCode: String
  customerId: String!
  metadata: JSON
  planId: String!
  startDate: String
}

input CreateTransactionInput {
  amount: Float!
  branchId: String
  date: String
  description: String
  eventId: String
  fundId: String
  memberId: String
  metadata: JSON
  organisationId: String!
  reference: String
  type: TransactionType!
  userId: String
}

input CreateTransferRequestInput {
  destinationBranchId: ID!
  memberId: ID!
  reason: String!
  sourceBranchId: ID!
  transferData: [TransferDataType!]!
}

input CreateUsersWithRoleInput {
  organisationId: ID!
  users: [UserInput!]!
}

input CreateVendorInput {
  address: String
  branchId: String
  contactEmail: String
  contactPerson: String
  name: String!
  organisationId: String
  phone: String!
}

input CreateVolunteerAssignmentInput {
  eventId: String!
  role: String
  volunteerId: String!
}

input CreateVolunteerInput {
  backgroundCheckStatus: String = "PENDING"
  branchId: String!
  memberId: String!
  role: String!
  trainingCompleted: Boolean = false
}

input CreateWorkflowTemplateInput {
  actions: [WorkflowActionInput!]!
  branchId: String
  description: String
  name: String!
  organisationId: String!
  triggerConfig: String
  triggerType: WorkflowTriggerType!
  type: WorkflowType!
}

type CreatedUserResult {
  email: String!
  error: String
  firstName: String!
  id: String
  lastName: String!
  roleName: String!
}

type DashboardData {
  branchId: ID
  branchName: String
  dashboardType: DashboardType!
  generatedAt: DateTime!
  layout: JSON
  organisationId: ID
  widgets: [DashboardWidgetUnion!]!
}

type DashboardEvent {
  date: DateTime!
  id: ID!
  location: String!
  name: String!
}

type DashboardGroup {
  id: ID!
  name: String!
  role: String!
}

type DashboardMilestone {
  baptismDate: DateTime
  confirmationDate: DateTime
}

type DashboardStat {
  attendance: Float!
  giving: String!
  groups: Int!
}

"""Types of dashboards available in the system"""
enum DashboardType {
  ADMIN
  BRANCH_ADMIN
  FINANCE
  MEMBER
  MINISTRY
  PASTORAL
  SUPER_ADMIN
}

union DashboardWidgetUnion = AnnouncementsWidget | ChartData | KpiCard | MinistryInvolvementWidget | MyGroupsWidget | NotificationsWidget | PrayerRequestSummaryWidget | QuickLinksWidget | RecentSacramentsWidget | TasksWidget | UpcomingEventsWidget

type DataOperation {
  completedAt: DateTime
  createdAt: DateTime!
  description: String
  entityType: String!
  errorCount: Float
  errors: JSON
  filePath: String
  fileSize: Float
  id: ID!
  metadata: JSON
  recordCount: Float
  status: DataOperationStatus!
  type: DataOperationType!
  user: AuthUser
  userId: ID
}

input DataOperationFilterInput {
  endDate: String
  entityType: String
  id: ID
  startDate: String
  status: String
  type: DataOperationType
  userId: ID
}

"""Status of a data operation"""
enum DataOperationStatus {
  CANCELLED
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

"""Type of data operation (import or export)"""
enum DataOperationType {
  EXPORT
  IMPORT
}

type DatabaseHealth {
  latency: Int!
  status: String!
}

input DateRangeInput {
  endDate: DateTime
  startDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DisableOrganizationInput {
  organizationId: String!
  reason: String!
}

"""Email custom scalar type"""
scalar Email

type EmailMessageDto {
  bodyHtml: String!
  bodyText: String
  branchId: String
  createdAt: DateTime!
  id: ID!
  organisationId: String
  recipientInfo: [RecipientInfoDto!]
  recipients: [String!]!
  senderEmail: String!
  sentAt: DateTime
  status: String!
  subject: String!
  templateId: String
  updatedAt: DateTime!
}

type EmailTemplateDto {
  bodyHtml: String!
  bodyText: String
  branchId: String
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  subject: String!
  updatedAt: DateTime!
}

type Event {
  attendanceRecords: [AttendanceRecord!]
  attendees: [User!]
  branch: Branch
  branchId: String
  category: String
  createdAt: DateTime
  createdBy: String
  creator: User
  description: String
  endDate: DateTime
  id: ID!
  location: String
  organisationId: String
  startDate: DateTime!
  title: String!
  updatedAt: DateTime
  updatedBy: String
}

type EventAttendanceOutput {
  checkIns: [CheckInRecord!]!
  event: ChildrenEvent!
  stats: EventAttendanceStats!
}

type EventAttendanceStats {
  currentlyPresent: Int!
  totalCheckedIn: Int!
  totalCheckedOut: Int!
}

type EventDto {
  id: String!
  startDate: DateTime!
  title: String!
}

type EventInfo {
  id: String!
  startDate: DateTime!
  title: String!
}

type EventItem {
  description: String
  endDate: DateTime
  id: String!
  location: String
  startDate: DateTime!
  title: String!
}

type Expense {
  amount: Float!
  branchId: String
  budgetId: String
  date: DateTime!
  description: String!
  expenseCategoryId: String!
  fundId: String!
  id: String!
  invoiceNumber: String
  organisationId: String
  paymentMethodId: String!
  receiptNumber: String
  vendorContact: String
  vendorId: String
  vendorName: String
}

type ExpenseCategory {
  branchId: String
  description: String
  id: String!
  name: String!
  organisationId: String
}

type Family {
  address: String
  city: String
  country: String
  createdAt: DateTime!
  customFields: JSON
  id: ID!
  members: [Member!]
  name: String!
  phoneNumber: String
  postalCode: String
  state: String
  updatedAt: DateTime!
}

type FamilyRelationship {
  createdAt: DateTime!
  family: Family
  familyId: ID
  id: ID!
  member: Member
  memberId: ID!
  relatedMember: Member
  relatedMemberId: ID!
  relationshipType: FamilyRelationshipType!
  updatedAt: DateTime!
}

"""Type of family relationship"""
enum FamilyRelationshipType {
  CHILD
  GRANDCHILD
  GRANDPARENT
  OTHER
  PARENT
  SIBLING
  SPOUSE
}

input FileUploadInput {
  branchId: String!
  contentType: String!
  description: String
  directory: String
  fileName: String!
  mediaType: String!
}

type FileUploadResponse {
  fileUrl: String!
  mediaItemId: String
  uploadUrl: String!
}

type FinanceStatsDto {
  donation: Float!
  expenses: Float!
  offering: Float!
  pledge: Float!
  specialContribution: Float!
  tithes: Float!
  totalContributions: Float!
}

type FinancialOverview {
  donation: Float!
  expenses: Float!
  offering: Float!
  pledge: Float!
  specialContribution: Float!
  tithes: Float!
  topGivingBranches: [TopGivingBranch!]!
  totalContributions: Float!
}

type FirstTimeVisitorsStat {
  first_time_visitors: Float!
  period: String!
}

type FollowUpReminder {
  actionRequired: String
  assignedToId: String
  branchId: String
  completedDate: DateTime
  createdAt: DateTime!
  createdBy: String!
  description: String
  dueDate: DateTime!
  followUpType: FollowUpType!
  id: String!
  memberId: String
  notes: String
  organisationId: String!
  reminderDate: DateTime
  status: FollowUpStatus!
  title: String!
  updatedAt: DateTime!
}

input FollowUpReminderFilterInput {
  assignedToId: String
  branchId: String
  endDate: String
  followUpType: FollowUpType
  memberId: String
  organisationId: String!
  startDate: String
  status: FollowUpStatus
}

enum FollowUpStatus {
  CANCELLED
  COMPLETED
  OVERDUE
  PENDING
}

enum FollowUpType {
  CARE_REQUEST
  COUNSELING_SESSION
  EVENT_FOLLOW_UP
  MEMBER_CONTACT
  PASTORAL_VISIT
}

input ForgotPasswordInput {
  email: String!
}

type Form {
  branchId: String
  createdAt: DateTime!
  createdById: String!
  description: String
  enableCaptcha: Boolean!
  expiresAt: DateTime
  fields: [FormField!]
  id: ID!
  isPublic: Boolean!
  notifyEmails: [String!]!
  redirectUrl: String
  slug: String!
  status: FormStatus!
  submissionCount: Float!
  submissions: [FormSubmission!]
  successMessage: String
  title: String!
  updatedAt: DateTime!
}

type FormField {
  conditionalLogic: JSON
  createdAt: DateTime!
  defaultValue: String
  fieldValues: [FormFieldValue!]
  form: Form
  formId: String!
  helpText: String
  id: ID!
  isRequired: Boolean!
  isUnique: Boolean!
  label: String!
  options: JSON
  order: Float!
  placeholder: String
  type: FormFieldType!
  updatedAt: DateTime!
  validations: JSON
  width: Float!
}

"""Type of form field"""
enum FormFieldType {
  ADDRESS
  CHECKBOX
  CUSTOM
  DATE
  DATETIME
  DIVIDER
  EMAIL
  FILE
  HEADING
  HIDDEN
  IMAGE
  MULTISELECT
  NAME
  NUMBER
  PARAGRAPH
  PHONE
  RADIO
  SELECT
  SIGNATURE
  SPACER
  TEXT
  TEXTAREA
  TIME
}

type FormFieldValue {
  createdAt: DateTime!
  field: FormField
  fieldId: String!
  fileUrl: String
  id: ID!

  """FormSubmission"""
  submission: String
  submissionId: String!
  value: String
}

input FormFilterInput {
  branchId: String
  search: String
  status: FormStatus
}

"""Status of a form"""
enum FormStatus {
  ARCHIVED
  CLOSED
  DRAFT
  PUBLISHED
}

type FormSubmission {
  branch: Branch
  branchId: String

  """FormFieldValue array"""
  fieldValues: [String!]
  form: Form
  formId: String!
  id: ID!
  ipAddress: String
  status: SubmissionStatus!
  submittedAt: DateTime!
  submittedBy: User
  submittedById: String
  userAgent: String
}

type Fund {
  branchId: String
  description: String
  endDate: DateTime
  goal: Float
  id: String!
  name: String!
  organisationId: String
  startDate: DateTime
  status: String!
}

type GenderDistribution {
  femaleCount: Float!
  femalePercentage: Float!
  maleCount: Float!
  malePercentage: Float!
  otherCount: Float!
  otherPercentage: Float!
}

input GenerateQRTokenInput {
  expiresInMinutes: Float = 60
  sessionId: ID!
}

type GroupItem {
  id: String!
  meetingDay: String
  meetingTime: String
  name: String!
  nextMeeting: DateTime
  role: String
  type: String
}

type GroupMember {
  createdAt: DateTime!
  id: ID!
  joinDate: DateTime!
  member: Member
  memberId: String!
  ministry: Ministry
  ministryId: String
  role: String!
  smallGroup: SmallGroup
  smallGroupId: String
  status: String!
  updatedAt: DateTime!
}

input GroupMemberFilterInput {
  id: ID
  memberId: ID
  ministryId: ID
  role: String
  smallGroupId: ID
  status: String
}

type GrowthRateStat {
  growth_rate: Float!
  period: String!
}

type Guardian {
  address: String
  branchId: String!
  canPickup: Boolean!
  children: [Child!]!
  createdAt: DateTime!
  email: String
  firstName: String
  fullName: String
  id: ID!
  isPrimaryGuardian: Boolean!
  lastName: String
  memberId: String
  notes: String
  phone: String!
  relationship: String!
  updatedAt: DateTime!
}

type ImportError {
  column: String!
  message: String!
  row: Float!
}

type ImportResult {
  errors: [ImportError!]
  importedRecords: Float!
  message: String
  success: Boolean!
  totalRecords: Float!
}

input InitialBranchSetupInput {
  address: String
  city: String
  country: String
  currency: String
  email: String
  name: String!
  organisationId: String!
  phoneNumber: String
  timezone: String
}

input InitialSettingsInput {
  logo: Upload
  organizationDescription: String
  organizationName: String!
  primaryColor: String
  secondaryColor: String
  websiteUrl: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type KpiCard {
  icon: String
  percentChange: Float
  title: String!
  value: String!
  widgetType: WidgetType!
}

type License {
  contactEmail: String
  contactPhone: String
  createdAt: DateTime!
  expiryDate: DateTime!
  features: JSON
  id: ID!
  key: String!
  maxBranches: Float
  maxUsers: Float
  notes: String
  organizationName: String
  startDate: DateTime!
  status: LicenseStatus!
  type: LicenseType!
  updatedAt: DateTime!
}

input LicenseFilterInput {
  id: ID
  key: String
  organizationName: String
  status: LicenseStatus
  type: LicenseType
}

"""Status of a license"""
enum LicenseStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

"""Type of license"""
enum LicenseType {
  BASIC
  ENTERPRISE
  PREMIUM
  STANDARD
}

"""Marital status options"""
enum MaritalStatus {
  DIVORCED
  MARRIED
  OTHER
  SEPARATED
  SINGLE
  WIDOWED
}

type MediaItem {
  branchId: String!
  description: String
  fileSize: Float!
  fileUrl: String!
  id: ID!
  mimeType: String!
  title: String!
  type: MediaType!
}

"""Type of media item"""
enum MediaType {
  AUDIO
  AUDIO_FILE
  DOCUMENT
  DOCUMENT_PDF
  DOCUMENT_WORD
  IMAGE
  OTHER
  SLIDESHOW
  VIDEO
}

type Member {
  address: String
  attendanceRecords: [JSON!]
  baptismDate: DateTime
  branch: Branch
  branchId: String
  children: [Member!]
  city: String
  confirmationDate: DateTime
  contributions: [JSON!]
  country: String
  createdAt: DateTime!
  customFields: JSON
  dateOfBirth: DateTime
  email: String
  employerName: String
  families: [Family!]
  familyRelationships: [FamilyRelationship!]
  firstName: String!
  gender: String
  groupMemberships: [JSON!]
  guardianProfile: JSON
  id: ID!
  lastName: String!
  maritalStatus: MaritalStatus
  membershipDate: DateTime
  middleName: String
  ministryMemberships: [MinistryMember!]
  notes: String
  notifications: [JSON!]
  occupation: String
  organisationId: String
  parent: Member
  parentId: String
  phoneNumber: String
  postalCode: String
  prayerRequests: [JSON!]
  privacySettings: JSON
  profileImageUrl: String
  rfidCardId: String
  sacramentalRecords: [JSON!]
  spouse: Member
  spouseId: String
  state: String
  status: MemberStatus!
  statusChangeDate: DateTime
  statusChangeReason: String
  updatedAt: DateTime!
}

type MemberAgeGroup {
  count: Int!
  percentage: Float!
  range: String!
}

type MemberDashboard {
  firstName: String!
  groups: [DashboardGroup!]!
  id: ID!
  lastName: String!
  membershipDate: DateTime
  membershipStatus: String!
  milestones: DashboardMilestone!
  profileImageUrl: String
  stats: DashboardStat!
  upcomingEvents: [DashboardEvent!]!
}

type MemberDemographic {
  category: String!
  count: Int!
  percentage: Float!
  value: String!
}

type MemberDemographicsData {
  ageDistribution: [AgeDistribution!]!
  branchId: ID
  branchName: String
  endDate: DateTime!
  genderDistribution: GenderDistribution!
  membershipStatusDistribution: [MembershipStatusDistribution!]!
  newMembersInPeriod: Float!
  organisationId: ID
  startDate: DateTime!
  totalMembers: Float!
}

type MemberEngagement {
  attendanceCount: Int!
  attendanceRate: Float!
  email: String
  engagementScore: Float!
  eventParticipation: Int!
  lastAttendance: String
  memberId: String!
  name: String!
}

input MemberFilterInput {
  branchId: String
  gender: String
  groupId: String
  maxAge: Float
  minAge: Float
  role: String
  search: String
  status: String
}

type MemberGeographic {
  averageAge: Float
  location: String!
  memberCount: Int!
  percentage: Float!
  primaryGender: String
}

type MemberPastoralHistory {
  careRequests: [CareRequest!]!
  reminders: [FollowUpReminder!]!
  sessions: [CounselingSession!]!
  visits: [PastoralVisit!]!
}

type MemberProfile {
  firstName: String!
  id: ID!
  lastName: String!
  profileImageUrl: String
  status: String
}

type MemberReport {
  charts: [MemberReportChart!]
  data: [MemberReportData!]!
  demographics: [MemberDemographic!]
  downloadUrl: String
  engagement: [MemberEngagement!]
  generatedAt: String!
  geographic: [MemberGeographic!]
  id: String!
  summary: MemberReportSummary!
}

type MemberReportChart {
  colors: [String!]!
  data: String!
  labels: [String!]!
  title: String!
  type: String!
}

type MemberReportData {
  activeMembers: Int!
  conversionRate: Float
  growthRate: Float
  inactiveMembers: Int!
  newMembers: Int!
  period: String!
  retentionRate: Float
  totalMembers: Int!
  visitors: Int!
}

enum MemberReportFormat {
  CSV
  EXCEL
  JSON
  PDF
}

enum MemberReportGroupBy {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

input MemberReportInput {
  branchId: String
  endDate: String!
  format: MemberReportFormat
  groupBy: MemberReportGroupBy
  includeDemographics: Boolean = true
  includeEngagement: Boolean = true
  includeInactive: Boolean = true
  includePersonalInfo: Boolean = false
  includeVisitors: Boolean = true
  organisationId: String
  startDate: String!
  type: MemberReportType!
}

type MemberReportSummary {
  activeMembers: Int!
  averageAge: Float!
  conversionRate: Float!
  endDate: String!
  femaleMembers: Int!
  firstTimeVisitors: Int!
  growthRate: Float!
  inactiveMembers: Int!
  maleMembers: Int!
  newMembers: Int!
  retentionRate: Float!
  returningVisitors: Int!
  startDate: String!
  title: String!
  totalMembers: Int!
  visitors: Int!
}

enum MemberReportType {
  DEMOGRAPHICS
  DETAILED
  ENGAGEMENT
  GEOGRAPHIC
  GROWTH_TRENDS
  RETENTION
  SUMMARY
}

type MemberStatistics {
  activeMembers: Int!
  ageGroups: [MemberAgeGroup!]!
  averageAge: Float!
  conversionRate: Float!
  genderDistribution: GenderDistribution!
  growthRate: Float!
  inactiveMembers: Int!
  lastMonth: MemberStatisticsPeriod
  newMembersInPeriod: Int!
  retentionRate: Float!
  totalMembers: Int!
  visitorsInPeriod: Int!
}

type MemberStatisticsPeriod {
  activeMembers: Int!
  inactiveMembers: Int!
  newMembersInPeriod: Int!
  totalMembers: Int!
  visitorsInPeriod: Int!
}

type MemberStatsDto {
  newMembersThisMonth: Float!
  total: Float!
}

"""Status of a church member"""
enum MemberStatus {
  ACTIVE
  DECEASED
  INACTIVE
  TRANSFERRED
  VISITOR
}

type MemberSummary {
  newMembersThisMonth: Float
  total: Float!
}

type MembershipStatusDistribution {
  count: Float!
  percentage: Float!
  status: String!
}

type MemoryUsage {
  external: Float!
  heapTotal: Float!
  heapUsed: Float!
  rss: Float!
}

type MemoryUsageDto {
  external: Float!
  heapTotal: Float!
  heapUsed: Float!
  rss: Float!
}

type MessagePerformanceEntity {
  overallDeliveryRate: Float!
  overallOpenRate: Float
  overallResponseRate: Float
  templates: [MessagePerformanceMetrics!]!
}

type MessagePerformanceMetrics {
  averageResponseTime: String
  clickRate: Float
  delivered: Int!
  deliveryRate: Float!
  openRate: Float
  opened: Int
  responseRate: Float
  templateName: String!
  totalSent: Int!
}

type MessageStatusCount {
  count: Int!
  status: String!
}

type MessageTimeSeriesData {
  count: Int!
  date: String!
}

union MessageUnion = EmailMessageDto | NotificationDto | SmsMessageDto

"""Type of spiritual milestone"""
enum MilestoneType {
  BAPTISM
  CONFIRMATION
  DEDICATION
  FIRST_COMMUNION
  MARRIAGE
  ORDINATION
  OTHER
}

type Ministry {
  branchId: ID
  createdAt: DateTime!
  description: String
  id: ID!
  members: [GroupMember!]
  name: String!
  organisationId: ID
  parent: Ministry
  parentId: ID
  smallGroups: [SmallGroup!]
  status: String!
  subMinistries: [Ministry!]
  type: String!
  updatedAt: DateTime!
}

input MinistryFilterInput {
  branchId: String
  id: ID
  name: String
  organisationId: ID
  parentId: String
  status: String
  type: String
}

type MinistryInvolvementItem {
  memberCount: Float!
  ministryName: String!
}

type MinistryInvolvementWidget {
  ministries: [MinistryInvolvementItem!]!
  title: String!
  widgetType: WidgetType!
}

type MinistryMember {
  id: ID!
  joinDate: String
  memberId: ID!
  ministry: Ministry!
  role: String
}

type Mutation {
  addFamilyConnection(familyId: String!, memberId: String!, relatedMemberId: String!, relationship: String!): Family!
  addMemberToBranch(branchId: String!, memberId: String!): Member!
  addMemberToFamily(familyId: String!, memberId: String!): Family!
  addMemberToFamilyByRfidCard(familyId: String!, relatedMemberId: String!, relationship: String!, rfidCardId: String!): Family!
  addMemberToGroup(groupId: ID!, memberId: ID!, roleInGroup: String): GroupMember!
  addMemberToMinistry(joinDate: String, memberId: ID!, ministryId: ID!, role: String): MinistryMember!
  addUserToBranch(branchId: String!, role: String!, userId: String!): User!
  archiveForm(id: String!): Form!
  assignBranchRoleToUser(assignedBy: ID, branchId: ID!, roleId: ID!, userId: ID!): UserBranch!
  assignCareRequest(assignedPastorId: String!, id: String!): CareRequest!
  assignGroupLeader(groupId: ID!, memberId: ID!): GroupMember!
  assignPermissionToRole(permissionId: ID!, roleId: ID!): Role!
  assignRfidCardToMember(assignRfidCardInput: AssignRfidCardInput!): Member!
  assignRoleToUser(roleId: ID!, userId: ID!): AuthUser!
  assignUserRole(branchId: String!, role: String!, userId: String!): User!
  assignVolunteerToEvent(input: CreateVolunteerAssignmentInput!): VolunteerEventAssignment!
  cancelDataOperation(id: ID!): DataOperation!
  cancelSubscription(id: ID!, reason: String): Subscription!
  cancelWorkflowExecution(executionId: String!): Boolean!
  checkInChild(input: CheckInInput!): CheckInRecord!
  checkOut(input: AttendanceCheckOutInput!): AttendanceRecord!
  checkOutChild(input: ChildCheckOutInput!): CheckInRecord!
  completeFollowUpReminder(id: String!, notes: String): FollowUpReminder!
  completeOnboardingStep(input: CompleteOnboardingStepInput!): OnboardingProgress!
  configureInitialSettings(branchId: ID!, input: InitialSettingsInput!): Boolean!
  createAnnouncement(input: CreateAnnouncementInput!): Announcement!
  createAttendanceSession(input: CreateAttendanceSessionInput!): AttendanceSession!
  createAuditLog(input: CreateAuditLogInput!): AuditLog!
  createBackup(input: CreateBackupInput!): Backup!
  createBranch(createBranchInput: CreateBranchInput!): Branch!
  createBranchAdmin(input: CreateBranchAdminInput!): UserBranch!
  createBranchSetting(input: CreateSettingInput!): Setting!
  createBudget(createBudgetInput: CreateBudgetInput!): Budget!
  createCareRequest(input: CreateCareRequestInput!): CareRequest!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createChild(input: CreateChildInput!): Child!
  createChildGuardianRelation(input: CreateChildGuardianRelationInput!): ChildGuardianRelation!
  createChildrenEvent(input: CreateChildrenEventInput!): ChildrenEvent!
  createChildrenMinistryVolunteer(input: CreateVolunteerInput!): ChildrenMinistryVolunteer!
  createContribution(createContributionInput: CreateContributionInput!): Contribution!
  createCounselingSession(input: CreateCounselingSessionInput!): CounselingSession!
  createDataExport(input: CreateDataExportInput!): DataOperation!
  createDataImport(input: CreateDataImportInput!): DataOperation!
  createEmailTemplate(input: CreateEmailTemplateInput!): EmailTemplateDto!
  createEvent(input: CreateEventInput!): Event!
  createExpense(createExpenseInput: CreateExpenseInput!): Expense!
  createExpenseCategory(createExpenseCategoryInput: CreateExpenseCategoryInput!): ExpenseCategory!
  createFamily(createFamilyInput: CreateFamilyInput!): Family!
  createFamilyRelationship(createFamilyRelationshipInput: CreateFamilyRelationshipInput!): FamilyRelationship!
  createFollowUpFromCareRequest(assignedToId: String!, dueDate: String!, requestId: String!): FollowUpReminder!
  createFollowUpFromSession(assignedToId: String!, dueDate: String!, sessionId: String!): FollowUpReminder!
  createFollowUpFromVisit(assignedToId: String!, dueDate: String!, visitId: String!): FollowUpReminder!
  createFollowUpReminder(input: CreateFollowUpReminderInput!): FollowUpReminder!
  createForm(input: CreateFormInput!): Form!
  createFormField(input: CreateFormFieldInput!): FormField!
  createFormFields(inputs: [CreateFormFieldInput!]!): [FormField!]!
  createFund(createFundInput: CreateFundInput!): Fund!
  createGuardian(input: CreateGuardianInput!): Guardian!
  createLicense(input: CreateLicenseInput!): License!
  createMediaItem(createMediaItemInput: CreateMediaItemInput!): MediaItem!
  createMember(createMemberInput: CreateMemberInput!): Member!
  createMinistry(input: CreateMinistryInput!): Ministry!
  createNotification(input: CreateNotificationInput!): NotificationDto!
  createOrganisation(input: CreateOrganisationInput!): Organisation!
  createOrganizationSubscription(input: CreateOrganizationSubscriptionInput!, organizationId: ID!, planId: ID!): Subscription!
  createPastoralVisit(input: CreatePastoralVisitInput!): PastoralVisit!
  createPermission(input: CreatePermissionInput!): Permission!
  createPledge(createPledgeInput: CreatePledgeInput!): Pledge!
  createPrayerRequest(data: CreatePrayerRequestInput!): PrayerRequest!
  createPredefinedWorkflows(branchId: String, organisationId: String): [WorkflowTemplate!]!
  createRole(input: CreateRoleInput!): Role!
  createRoleWithPermissions(input: CreateRoleWithPermissionsInput!): Role!
  createSacramentalRecord(input: CreateSacramentalRecordInput!): SacramentalRecord!
  createSeries(createSeriesInput: CreateSeriesInput!): Series!
  createSermon(createSermonInput: CreateSermonInput!): Sermon!
  createSmallGroup(input: CreateSmallGroupInput!): SmallGroup!
  createSpeaker(createSpeakerInput: CreateSpeakerInput!): Speaker!
  createSpiritualMilestone(createSpiritualMilestoneInput: CreateSpiritualMilestoneInput!): SpiritualMilestone!
  createSubscription(input: CreateSubscriptionInput!): Subscription!
  createSubscriptionPlan(input: CreatePlanDto!): SubscriptionPlan!
  createSuperAdminUser(branchId: ID, email: String!, firstName: String!, lastName: String!, organisationId: ID!, password: String!): ID!
  createTemplate(input: CreateEmailTemplateInput!): EmailTemplateDto!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  createTransferRequest(input: CreateTransferRequestInput!): TransferRequest!
  createUsersWithRole(input: CreateUsersWithRoleInput!): [CreatedUserResult!]!
  createVendor(createVendorInput: CreateVendorInput!): Vendor!
  createWorkflowTemplate(branchId: String, input: CreateWorkflowTemplateInput!, organisationId: String!): WorkflowTemplate!
  deleteAnnouncement(id: ID!): Announcement!
  deleteAttendanceSession(id: ID!): AttendanceSession!
  deleteCareRequest(id: String!): Boolean!
  deleteCategory(id: ID!): Category!
  deleteCounselingSession(id: String!): Boolean!
  deleteEmailTemplate(id: ID!): Boolean!
  deleteFile(id: String!): Boolean!
  deleteFollowUpReminder(id: String!): Boolean!
  deleteLicense(id: ID!): Boolean!
  deleteMinistry(id: ID!): Boolean!
  deleteNotification(notificationId: ID!): Boolean!
  deleteOrganisation(id: ID!): Boolean!
  deletePastoralVisit(id: String!): Boolean!
  deletePermission(id: ID!): Permission!
  deleteRole(id: ID!): Role!
  deleteSacramentalRecord(id: ID!): SacramentalRecord!
  deleteSmallGroup(id: ID!): Boolean!
  deleteSubscriptionPlan(id: ID!): Boolean!
  deleteTemplate(id: ID!): Boolean!
  deleteWorkflowTemplate(branchId: String, id: String!, organisationId: String!): Boolean!
  disableOrganization(input: DisableOrganizationInput!): OrganizationWithSubscription!
  enableOrganization(id: String!): OrganizationWithSubscription!
  forgotPassword(input: ForgotPasswordInput!): SuccessMessage!
  generateAbsenceAlerts(input: AbsenceAlertConfigInput!): AbsenceAlertResult!
  generateQRToken(input: GenerateQRTokenInput!): QRCodeToken!
  getPresignedUploadUrl(input: FileUploadInput!): FileUploadResponse!
  importFinancialData(branchId: ID!, file: Upload!, mapping: String!, type: String!): ImportResult!
  importMemberData(branchId: ID!, file: Upload!, mapping: String!): ImportResult!
  initializeOnboarding(branchId: ID!): OnboardingProgress!
  initiateBranchSetup(input: InitialBranchSetupInput!): ID!
  login(input: SignInDto!): AuthPayload!
  logout(input: RefreshTokenInput!): SuccessMessage!
  markAllNotificationsAsRead(userId: ID!): Boolean!
  markNotificationAsRead(notificationId: ID!): NotificationDto!
  processCardScan(input: CardScanInput!): AttendanceRecord!
  publishForm(id: String!): Form!
  recordAttendance(input: RecordAttendanceInput!): AttendanceRecord!
  recordBulkAttendance(input: RecordBulkAttendanceInput!): Boolean!
  refreshToken(input: RefreshTokenInput!): TokenPayloadDto!
  register(input: SignUpDto!): UserProfile!
  remove(id: ID!): Sermon!
  removeBranch(id: ID!): Branch!
  removeBranchRoleFromUser(branchId: ID!, roleId: ID!, userId: ID!): UserBranch!
  removeBudget(id: String!): Budget!
  removeChild(id: ID!): Child!
  removeChildGuardianRelation(childId: ID!, guardianId: ID!): Boolean!
  removeChildrenEvent(id: ID!): ChildrenEvent!
  removeChildrenMinistryVolunteer(id: ID!): ChildrenMinistryVolunteer!
  removeContribution(id: String!): Contribution!
  removeEvent(id: ID!): Event!
  removeExpense(id: String!): Expense!
  removeExpenseCategory(id: String!): ExpenseCategory!
  removeFamily(id: String!, relationship: String!): Boolean!
  removeFamilyRelationship(id: String!): Boolean!
  removeForm(id: String!): Form!
  removeFormField(id: String!): FormField!
  removeFormSubmission(id: String!): FormSubmission!
  removeFund(id: String!): Fund!
  removeGuardian(id: ID!): Guardian!
  removeMediaItem(id: ID!): MediaItem!
  removeMember(id: String!): Boolean!
  removeMemberFromBranch(branchId: String!, memberId: String!): Member!
  removeMemberFromFamily(familyId: String!, memberId: String!): Family!
  removeMemberFromGroup(groupId: ID!, memberId: ID!): Boolean!
  removePermissionFromRole(permissionId: ID!, roleId: ID!): Role!
  removePledge(id: String!): Pledge!
  removePrayerRequest(id: ID!): PrayerRequest!
  removeRfidCardFromMember(memberId: String!): Member!
  removeRoleFromUser(roleId: ID!, userId: ID!): AuthUser!
  removeSeries(id: ID!): Series!
  removeSpeaker(id: ID!): Speaker!
  removeSpiritualMilestone(id: String!): Boolean!
  removeTransaction(id: ID!): Transaction!
  removeTransferRequest(id: ID!): Boolean!
  removeUserRole(branchId: String!, role: String!, userId: String!): User!
  removeVendor(id: String!): Vendor!
  removeVolunteerFromEvent(eventId: ID!, volunteerId: ID!): Boolean!
  reorderFormFields(fieldIds: [String!]!, formId: String!): [FormField!]!
  resetOnboarding(branchId: ID!): OnboardingProgress!
  resetPassword(newPassword: String!, token: String!): SuccessMessage!
  restoreBackup(input: RestoreBackupInput!): Backup!
  retryWorkflowExecution(executionId: String!): WorkflowExecution!
  saveUserDashboardPreference(branchId: ID!, dashboardType: DashboardType!, layoutConfig: JSON!, organisationId: ID): UserDashboardPreference!
  scheduleAbsenceCheck(input: AbsenceAlertConfigInput!): AbsenceAlertResult!
  sendEmail(input: SendEmailInput!): Boolean!
  sendSms(input: SendSmsInput!): Boolean!
  submitForm(input: CreateFormSubmissionInput!): FormSubmission!
  syncSubscriptionPlanWithPaystack(id: ID!): SubscriptionPlan!
  transferMember(fromBranchId: String!, id: String!, reason: String, toBranchId: String!): Member!
  triggerSubscriptionLifecycleCheck: SubscriptionLifecycleResult!
  triggerWorkflow(input: TriggerWorkflowInput!): WorkflowExecution!
  update(updateSermonInput: UpdateSermonInput!): Sermon!
  updateAnnouncement(id: ID!, input: UpdateAnnouncementInput!): Announcement!
  updateAttendanceSession(input: UpdateAttendanceSessionInput!): AttendanceSession!
  updateBranch(id: ID!, updateBranchInput: UpdateBranchInput!): Branch!
  updateBranchSettings(branchId: ID!, input: UpdateBranchSettingsInput!): BranchSettings!
  updateBudget(updateBudgetInput: UpdateBudgetInput!): Budget!
  updateCareRequest(input: UpdateCareRequestInput!): CareRequest!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateChild(input: UpdateChildInput!): Child!
  updateChildrenEvent(input: UpdateChildrenEventInput!): ChildrenEvent!
  updateChildrenMinistryVolunteer(input: UpdateVolunteerInput!): ChildrenMinistryVolunteer!
  updateContribution(updateContributionInput: UpdateContributionInput!): Contribution!
  updateCounselingSession(input: UpdateCounselingSessionInput!): CounselingSession!
  updateEmailTemplate(id: ID!, input: UpdateEmailTemplateInput!): EmailTemplateDto!
  updateEvent(input: UpdateEventInput!): Event!
  updateExpense(updateExpenseInput: UpdateExpenseInput!): Expense!
  updateExpenseCategory(updateExpenseCategoryInput: UpdateExpenseCategoryInput!): ExpenseCategory!
  updateFamily(id: String!, updateFamilyInput: UpdateFamilyInput!): Family!
  updateFamilyRelationship(id: String!, updateFamilyRelationshipInput: UpdateFamilyRelationshipInput!): FamilyRelationship!
  updateFollowUpReminder(input: UpdateFollowUpReminderInput!): FollowUpReminder!
  updateForm(input: UpdateFormInput!): Form!
  updateFormField(input: UpdateFormFieldInput!): FormField!
  updateFund(updateFundInput: UpdateFundInput!): Fund!
  updateGroupMember(id: ID!, input: UpdateGroupMemberInput!): GroupMember!
  updateGuardian(input: UpdateGuardianInput!): Guardian!
  updateLicense(id: ID!, input: UpdateLicenseInput!): License!
  updateMediaItem(updateMediaItemInput: UpdateMediaItemInput!): MediaItem!
  updateMember(id: String!, updateMemberInput: UpdateMemberInput!): Member!
  updateMemberStatus(id: String!, reason: String, status: MemberStatus!): Member!
  updateMinistry(id: ID!, input: UpdateMinistryInput!): Ministry!
  updateOrganisation(input: UpdateOrganisationInput!): Organisation!
  updatePastoralVisit(input: UpdatePastoralVisitInput!): PastoralVisit!
  updatePermission(id: ID!, input: UpdatePermissionInput!): Permission!
  updatePledge(updatePledgeInput: UpdatePledgeInput!): Pledge!
  updatePrayerRequest(data: UpdatePrayerRequestInput!, id: ID!): PrayerRequest!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!
  updateSacramentalRecord(input: UpdateSacramentalRecordInput!): SacramentalRecord!
  updateSeries(updateSeriesInput: UpdateSeriesInput!): Series!
  updateSermonStatus(id: ID!, status: String!): Sermon!
  updateSetting(id: ID!, input: UpdateSettingInput!): Setting!
  updateSmallGroup(id: ID!, input: UpdateSmallGroupInput!): SmallGroup!
  updateSpeaker(updateSpeakerInput: UpdateSpeakerInput!): Speaker!
  updateSpiritualMilestone(id: String!, updateSpiritualMilestoneInput: UpdateSpiritualMilestoneInput!): SpiritualMilestone!
  updateSubscription(id: ID!, input: UpdateSubscriptionInput!): Subscription!
  updateSubscriptionPlan(id: ID!, input: UpdatePlanDto!): SubscriptionPlan!
  updateTemplate(id: ID!, input: UpdateEmailTemplateInput!): EmailTemplateDto!
  updateTransaction(input: UpdateTransactionInput!): Transaction!
  updateTransferRequest(input: UpdateTransferRequestInput!): TransferRequest!
  updateUserActiveStatus(id: ID!, isActive: Boolean!): AuthUser!
  updateVendor(updateVendorInput: UpdateVendorInput!): Vendor!
  updateWorkflowTemplate(branchId: String, id: String!, input: UpdateWorkflowTemplateInput!, organisationId: String!): WorkflowTemplate!
  uploadMemberImage(file: Upload!, memberId: String!): String!
  uploadOrganisationBrandingFile(file: Upload!, organisationId: ID!): String!
  uploadSacramentalCertificate(file: Upload!, recordId: ID!): SacramentalRecord!
  verifyPaymentAndCreateSubscription(input: VerifyPaymentInput!): Subscription!
}

type MyGroupsWidget {
  groups: [GroupItem!]!
  title: String!
  widgetType: WidgetType!
}

type NotificationDto {
  branchId: String
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  link: String
  memberId: String
  message: String!
  organisationId: String
  readAt: DateTime
  title: String!
  type: String!
  updatedAt: DateTime!
  userId: String!
}

type NotificationItem {
  date: DateTime!
  id: String!
  message: String!
  read: Boolean!
  type: String!
}

type NotificationSettings {
  emailNotifications: Boolean!
  financialNotifications: Boolean!
  smsNotifications: Boolean!
  transferNotifications: Boolean!
}

input NotificationSettingsInput {
  emailNotifications: Boolean!
  financialNotifications: Boolean!
  smsNotifications: Boolean!
  transferNotifications: Boolean!
}

"""Type of notification"""
enum NotificationType {
  ERROR
  EVENT_REMINDER
  INFO
  SUCCESS
  WARNING
}

type NotificationsWidget {
  notifications: [NotificationItem!]!
  title: String!
  widgetType: WidgetType!
}

type OnboardingProgress {
  branchId: ID!
  completedAt: DateTime
  completedSteps: [OnboardingStep!]!
  currentStep: OnboardingStep!
  id: ID!
  importedFinances: Boolean!
  importedMembers: Boolean!
  isCompleted: Boolean!
  lastUpdatedAt: DateTime!
  startedAt: DateTime!
}

"""Steps in the onboarding process"""
enum OnboardingStep {
  ADMIN_SETUP
  BRANCH_SETUP
  BRANDING
  COMPLETION
  FINANCIAL_SETUP
  MEMBER_IMPORT
  MODULE_QUICK_START
  ORGANIZATION_DETAILS
  ROLE_CONFIGURATION
  USER_INVITATIONS
  WELCOME
}

type Organisation {
  accentColor: String
  address: String
  brandFont: String
  city: String
  country: String
  createdAt: DateTime!
  currency: String
  denomination: String
  description: String
  email: String
  faviconUrl: String
  foundingYear: Float
  id: ID!
  logoUrl: String
  missionStatement: String
  name: String!
  phoneNumber: String
  primaryColor: String
  secondaryColor: String
  size: String
  slogan: String
  socialHandle: String
  state: String
  timezone: String
  updatedAt: DateTime!
  vision: String
  website: String
  zipCode: String
}

type OrganisationInfo {
  adminCount: Float!
  branchCount: Float!
  id: String!
  name: String!
}

type OrganisationOverview {
  organisations: [OrganisationInfo!]!
  total: Float!
}

type OrganizationCounts {
  branches: Int!
  members: Int!
  users: Int!
}

input OrganizationFilterInput {
  limit: Int = 50
  offset: Int = 0
  search: String
  status: String
  subscriptionStatus: String
}

type OrganizationStats {
  active: Int!
  cancelled: Int!
  inactive: Int!
  suspended: Int!
  total: Int!
  trial: Int!
}

type OrganizationSubscriptionInfo {
  amount: Int!
  currentPeriodEnd: DateTime!
  currentPeriodStart: DateTime!
  id: ID!
  planName: String!
  status: String!
}

type OrganizationSubscriptionStatus {
  daysUntilExpiry: Int
  hasActiveSubscription: Boolean!
  isInGracePeriod: Boolean
  subscription: Subscription
}

type OrganizationWithSubscription {
  _count: OrganizationCounts!
  createdAt: DateTime!
  email: String
  id: ID!
  name: String!
  status: String!
  subscription: OrganizationSubscriptionInfo
  suspendedAt: DateTime
  suspendedBy: String
  suspensionReason: String
  updatedAt: DateTime!
}

"""Available output formats for reports"""
enum OutputFormat {
  CSV
  EXCEL
  JSON
  PDF
}

type PaginatedBranches {
  """Indicates if there are more branches to fetch"""
  hasNextPage: Boolean!

  """A list of branches for the current page"""
  items: [Branch!]!

  """Total number of branches matching the filter"""
  totalCount: Int!
}

type PaginatedTransaction {
  hasNextPage: Boolean!
  items: [Transaction!]
  stats: TransactionStats
  totalCount: Int!
}

type PaginatedTransferRequests {
  hasNextPage: Boolean!
  items: [TransferRequest!]!
  totalCount: Int!
}

type PaginatedUsers {
  hasNextPage: Boolean!
  items: [AuthUser!]!
  totalCount: Int!
}

input PaginationInput {
  """Number of items to skip"""
  skip: Int = 0

  """Number of items to take (limit)"""
  take: Int = 10
}

type PastorWorkload {
  assignedCareRequests: [CareRequest!]!
  assignedReminders: [FollowUpReminder!]!
  stats: PastorWorkloadStats!
  upcomingSessions: [CounselingSession!]!
  upcomingVisits: [PastoralVisit!]!
}

type PastorWorkloadStats {
  completionRate: Float
  totalCareRequests: Float!
  totalReminders: Float!
  totalSessions: Float!
  totalVisits: Float!
}

type PastoralCareActivity {
  date: DateTime!
  description: String
  id: String!
  memberName: String
  pastorName: String
  title: String!
  type: String!
}

type PastoralCareDashboard {
  dueTodayReminders: [FollowUpReminder!]!
  overdueReminders: [FollowUpReminder!]!
  stats: PastoralCareStats!
  upcomingSessions: [CounselingSession!]!
  upcomingVisits: [PastoralVisit!]!
  urgentCareRequests: [CareRequest!]!
}

type PastoralCareStats {
  completedSessions: Int!
  completedVisits: Int!
  openCareRequests: Int!
  overdueReminders: Int!
  pendingReminders: Int!
  resolvedCareRequests: Int!
  totalCareRequests: Int!
  totalReminders: Int!
  totalSessions: Int!
  totalVisits: Int!
  upcomingSessions: Int!
  upcomingVisits: Int!
}

type PastoralVisit {
  actualDate: DateTime
  branchId: String
  createdAt: DateTime!
  createdBy: String!
  description: String
  followUpDate: DateTime
  id: String!
  location: String
  memberId: String!
  notes: String
  organisationId: String!
  pastorId: String!
  scheduledDate: DateTime!
  status: PastoralVisitStatus!
  title: String!
  updatedAt: DateTime!
  visitType: PastoralVisitType!
}

input PastoralVisitFilterInput {
  branchId: String
  endDate: String
  memberId: String
  organisationId: String!
  pastorId: String
  startDate: String
  status: PastoralVisitStatus
  visitType: PastoralVisitType
}

enum PastoralVisitStatus {
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
  SCHEDULED
}

enum PastoralVisitType {
  BEREAVEMENT_VISIT
  COUNSELING_SESSION
  EMERGENCY_VISIT
  FOLLOW_UP_VISIT
  HOME_VISIT
  HOSPITAL_VISIT
  OFFICE_MEETING
  PHONE_CALL
  PRAYER_VISIT
  VIDEO_CALL
}

input PaymentFilterInput {
  dateFrom: String
  dateTo: String
  organisationId: String
  skip: Int = 0
  status: PaymentStatus
  subscriptionId: String
  take: Int = 50
}

type PaymentMethod {
  branchId: String
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  organisationId: String
}

"""Payment status (PENDING, SUCCESS, FAILED, etc.)"""
enum PaymentStatus {
  CANCELLED
  FAILED
  PENDING
  REFUNDED
  SUCCESSFUL
}

type Permission {
  action: String!
  createdAt: DateTime!
  description: String
  id: ID!
  roles: [Role]
  subject: String!
  updatedAt: DateTime!
}

"""Phone number custom scalar type (E.164 format)"""
scalar PhoneNumber

input PlanFilterInput {
  interval: SubscriptionInterval
  isActive: Boolean
  maxAmount: Float
  minAmount: Float
  organisationId: String
  searchTerm: String
  skip: Int = 0
  take: Int = 50
}

type Pledge {
  amount: Float!
  amountFulfilled: Float!
  branchId: String
  endDate: DateTime
  frequency: String!
  fundId: String!
  id: String!
  memberId: String!
  notes: String
  organisationId: String
  startDate: DateTime!
  status: String!
}

type PrayerRequest {
  assignedPastorId: String
  branchId: String!
  createdAt: DateTime!
  id: ID!
  member: Member!
  memberId: String!
  organisationId: String
  requestText: String!
  status: PrayerRequestStatusEnum!
  updatedAt: DateTime!
}

enum PrayerRequestStatusEnum {
  ANSWERED
  IN_PROGRESS
  NEW
}

type PrayerRequestSummaryData {
  count: Float!
  status: String!
}

type PrayerRequestSummaryWidget {
  summary: [PrayerRequestSummaryData!]!
  title: String!
  widgetType: WidgetType!
}

type QRCodeToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  sessionId: String!
  token: String!
  updatedAt: DateTime!
}

type Query {
  activeCheckIns(branchId: String!, eventId: String): [CheckInRecord!]!
  adminPermission(id: ID!): Permission!
  adminPermissions: [Permission!]!
  adminRole(id: ID!): Role!
  adminRoles: [Role!]!
  adminUser(id: ID!): AuthUser!
  adminUsers(filter: UserFilterInput, pagination: PaginationInput): PaginatedUsers!
  allAttendanceRecords(filter: AttendanceFilterInput): [AttendanceRecord!]!
  allMessages(filter: AllMessagesFilterInput): [MessageUnion!]!
  announcements(branchId: ID): [Announcement!]!
  assigneeFollowUpReminders(assignedToId: String!, status: String): [FollowUpReminder!]!
  attendanceRecords(filter: AttendanceFilterInput, sessionId: ID): [AttendanceRecord!]!
  attendanceSession(id: ID!): AttendanceSession!
  attendanceSessions(branchId: ID, organisationId: ID): [AttendanceSession!]!
  attendanceStats(input: AttendanceStatsInput!): AttendanceStats!
  attendanceTrendReport(branchId: ID, dateRange: DateRangeInput, eventTypeId: ID, organisationId: ID): AttendanceTrendData!
  auditLog(id: ID!): AuditLog!
  auditLogs(filter: AuditLogFilterInput, pagination: PaginationInput): [AuditLog!]!
  backup(id: ID!): Backup!
  backups(filter: BackupFilterInput): [Backup!]!
  birthdayMembers(range: BirthdayRangeEnum!): [Member!]!
  branch(id: String!): Branch
  branchActivities(branchId: String!, limit: Float, skip: Float): [BranchActivity!]!
  branchDashboard(branchId: String!): BranchDashboardDataDto!
  branchUpcomingEvents(branchId: String!, limit: Float): [Event!]!
  branchUsers(branchId: String!): [User!]!
  branches(filterInput: BranchFilterInput, paginationInput: PaginationInput): PaginatedBranches!
  budget(id: String!): Budget!
  budgets(organisationId: String): [Budget!]!
  careRequest(id: String!): CareRequest!
  careRequests(filter: CareRequestFilterInput!, skip: Int! = 0, take: Int! = 50): [CareRequest!]!
  careRequestsCount(filter: CareRequestFilterInput!): Int!
  categories: [Category!]!
  category(id: ID!): Category
  checkInHistory(branchId: String!, childId: String, dateFrom: DateTime, dateTo: DateTime, eventId: String): [CheckInRecord!]!
  checkInStats(branchId: String!, dateFrom: DateTime, dateTo: DateTime): CheckInStatsOutput!
  child(id: ID!): Child!
  children(filter: ChildFilterInput): [Child!]!
  childrenEvent(id: ID!): ChildrenEvent!
  childrenEvents(branchId: String): [ChildrenEvent!]!
  childrenMinistryVolunteer(id: ID!): ChildrenMinistryVolunteer!
  childrenMinistryVolunteerByMember(memberId: ID!): ChildrenMinistryVolunteer
  childrenMinistryVolunteers(branchId: String, trainingCompleted: Boolean): [ChildrenMinistryVolunteer!]!
  communicationChannelStats(filter: CommunicationStatsFilterInput): [CommunicationChannelStats!]!
  communicationStats(filter: CommunicationStatsFilterInput): CommunicationStatsEntity!
  contribution(id: String!): Contribution!
  contributionTypes(branchId: String, organisationId: String): [ContributionType!]!
  contributions(organisationId: String): [Contribution!]!
  counselingSession(id: String!): CounselingSession!
  counselingSessions(filter: CounselingSessionFilterInput!, skip: Int! = 0, take: Int! = 50): [CounselingSession!]!
  counselingSessionsCount(filter: CounselingSessionFilterInput!): Int!
  currentChildrenEvents(branchId: String!): [ChildrenEvent!]!
  dashboardData(branchId: ID, dashboardType: DashboardType!, organisationId: ID): DashboardData!
  dataOperation(id: ID!): DataOperation!
  dataOperations(filter: DataOperationFilterInput): [DataOperation!]!
  dueTodayFollowUpReminders: [FollowUpReminder!]!
  emailById(id: ID!): EmailMessageDto!
  emails(branchId: ID, organisationId: ID): [EmailMessageDto!]!
  event(id: ID!): Event!
  eventAttendance(eventId: ID!): EventAttendanceOutput!
  eventAttendanceRecords(eventId: ID!, filter: AttendanceFilterInput): [AttendanceRecord!]!
  events(branchId: String, organisationId: String): [Event!]!
  expense(id: String!): Expense!
  expenseCategories(organisationId: String): [ExpenseCategory!]!
  expenseCategory(id: String!): ExpenseCategory!
  expenses(organisationId: String): [Expense!]!
  exportFormSubmissions(formId: String!): JSON!
  exportTransactions(branchId: String, dateRange: DateRangeInput, eventId: String, exportFormat: String!, fundId: String, organisationId: String, searchTerm: String, type: TransactionType): String!
  families(skip: Int = 0, take: Int = 10): [Family!]!
  familiesCount: Int!
  family(id: String!): Family!
  familyRelationship(id: String!): FamilyRelationship!
  familyRelationships(skip: Int = 0, take: Int = 10): [FamilyRelationship!]!
  familyRelationshipsByMember(memberId: String!): [FamilyRelationship!]!
  familyRelationshipsCount: Int!
  filteredMembers(filter: MemberFilterInput): [Member!]!
  findAbsentMembers(input: AbsenceAlertConfigInput!): AbsenceAlertResult!
  findByMember(memberId: ID!): Speaker
  findByType(branchId: String, type: String!): [MediaItem!]!
  findOne(id: ID!): Sermon!
  findRecent(branchId: String, limit: Float): [Sermon!]!
  followUpReminder(id: String!): FollowUpReminder!
  followUpReminders(filter: FollowUpReminderFilterInput!, skip: Int! = 0, take: Int! = 50): [FollowUpReminder!]!
  followUpRemindersCount(filter: FollowUpReminderFilterInput!): Int!
  form(id: String!): Form!
  formField(id: String!): FormField!
  formFields(formId: String!): [FormField!]!
  formSubmission(id: String!): FormSubmission!
  formSubmissions(filter: SubmissionFilterInput!): [FormSubmission!]!
  forms(filter: FormFilterInput): [Form!]!
  fund(id: String!): Fund!
  funds(branchId: String, organisationId: String!): [Fund!]!
  generateAttendanceReport(generatedBy: String! = "system", input: AttendanceReportInput!): AttendanceReport!
  generateFundsImportTemplate: String!
  generateLicenseKey: String!
  generateMemberImportTemplate: String!
  generateMemberReport(input: MemberReportInput!): MemberReport!
  generateReport(input: ReportRequestInput!): ReportOutput!
  getActiveSeries(branchId: String): [Series!]!
  getSubscriptions(filter: SubscriptionFilterInput): [Subscription!]!
  groupMember(id: ID!): GroupMember!
  groupMembers(filters: GroupMemberFilterInput): [GroupMember!]!
  guardian(id: ID!): Guardian!
  guardians(branchId: String): [Guardian!]!
  hello: String!
  license(id: ID!): License!
  licenseByKey(key: String!): License!
  licenses(filter: LicenseFilterInput): [License!]!
  me: UserProfile!
  mediaItem(id: ID!): MediaItem!
  mediaItems(branchId: String, type: String): [MediaItem!]!
  member(id: String!): Member!
  memberAttendanceHistory(memberId: ID!): [AttendanceRecord!]!
  memberByRfidCard(rfidCardId: String!): Member
  memberCounselingSessions(includeConfidential: Boolean! = false, memberId: String!): [CounselingSession!]!
  memberDashboard(memberId: String!): MemberDashboard!
  memberDemographicsReport(branchId: ID, dateRange: DateRangeInput, organisationId: ID): MemberDemographicsData!
  memberPastoralHistory(memberId: String!): MemberPastoralHistory!
  memberSearch(query: String!): [Member!]!
  memberStatistics(branchId: String, organisationId: String): MemberStatistics!
  members(branchId: String, hasRfidCard: Boolean, organisationId: String, search: String, skip: Int = 0, take: Int = 10): [Member!]!
  membersCount(branchId: String, organisationId: String): Int!
  messagePerformanceMetrics(filter: CommunicationStatsFilterInput): MessagePerformanceEntity!
  ministries(filters: MinistryFilterInput): [Ministry!]!
  ministry(id: ID!): Ministry!
  myCareRequests(status: String): [CareRequest!]!
  myFollowUpReminders(status: String): [FollowUpReminder!]!
  notifications(branchId: ID, organisationId: ID): [NotificationDto!]!
  onboardingProgress(branchId: ID!): OnboardingProgress!
  organisation(id: ID!): Organisation
  organisations: [Organisation!]!
  organizationStats: OrganizationStats!
  organizationSubscriptionDetails(id: String!): OrganizationWithSubscription!
  organizationSubscriptionStatus(organizationId: String!): OrganizationSubscriptionStatus!
  overdueCareRequests: [CareRequest!]!
  overdueFollowUpReminders: [FollowUpReminder!]!
  pastChildrenEvents(branchId: String!): [ChildrenEvent!]!
  pastorCareRequests(pastorId: String!, status: String): [CareRequest!]!
  pastorWorkload(pastorId: String!): PastorWorkload!
  pastoralCareDashboard: PastoralCareDashboard!
  pastoralCareRecentActivity(days: Int! = 7): [PastoralCareActivity!]!
  pastoralCareStats: PastoralCareStats!
  pastoralVisit(id: String!): PastoralVisit!
  pastoralVisits(filter: PastoralVisitFilterInput!, skip: Int! = 0, take: Int! = 50): [PastoralVisit!]!
  pastoralVisitsCount(filter: PastoralVisitFilterInput!): Int!
  paymentMethods(organisationId: String): [PaymentMethod!]!
  permissionsGroupedBySubject: [[Permission!]!]!
  pledge(id: String!): Pledge!
  pledges(organisationId: String): [Pledge!]!
  popularSubscriptionPlans(limit: Float! = 5, organisationId: ID): [SubscriptionPlan!]!
  prayerRequest(id: ID!): PrayerRequest!
  prayerRequests(branchId: String, organisationId: String, status: PrayerRequestStatusEnum): [PrayerRequest!]!
  publicForm(slug: String!): Form!
  recipientGroupStats(filter: CommunicationStatsFilterInput): [RecipientGroupStats!]!
  recipientGroups: [RecipientGroup!]!
  sacramentStats(branchId: ID, period: String): [SacramentStatsOutput!]!
  sacramentalRecord(id: ID!): SacramentalRecord!
  sacramentalRecords(filter: SacramentalRecordFilterInput): [SacramentalRecord!]!
  sacramentsByMember(memberId: ID!): [SacramentalRecord!]!
  search(branchId: String, query: String!, type: String): [MediaItem!]!
  series(branchId: String): [Series!]!
  seriesById(id: ID!): Series!
  sermons(branchId: String, seriesId: String, speakerId: String, status: String): [Sermon!]!
  settings(branchId: String): [Setting!]!
  smallGroup(id: ID!): SmallGroup!
  smallGroups(filters: SmallGroupFilterInput): [SmallGroup!]!
  sms(branchId: ID, organisationId: ID): [SmsMessageDto!]!
  smsById(id: ID!): SmsMessageDto!
  speaker(id: ID!): Speaker!
  speakers(branchId: String): [Speaker!]!
  spiritualMilestone(id: String!): SpiritualMilestone!
  spiritualMilestones(skip: Int = 0, take: Int = 10): [SpiritualMilestone!]!
  spiritualMilestonesByMember(memberId: String!): [SpiritualMilestone!]!
  spiritualMilestonesCount: Int!
  subscription(id: ID!): Subscription!
  subscriptionLifecycleStats: SubscriptionLifecycleStats!
  subscriptionOrganizations(filter: OrganizationFilterInput): [OrganizationWithSubscription!]!
  subscriptionPayments(filter: PaymentFilterInput): [SubscriptionPayment!]!
  subscriptionPlan(id: ID!): SubscriptionPlan!
  subscriptionPlans(filter: PlanFilterInput): [SubscriptionPlan!]!
  superAdminDashboardData(organisationId: ID): SuperAdminDashboardData!
  systemHealth: SystemHealth!
  template(id: ID!): EmailTemplateDto!
  templates(branchId: ID, organisationId: ID): [EmailTemplateDto!]!
  transaction(id: ID!): Transaction!
  transactionStats(branchId: String, contributionTypeId: String, dateRange: DateRangeInput, eventId: String, fundId: String, organisationId: String): TransactionStats!
  transactions(branchId: String, dateRange: DateRangeInput, eventId: String, fundId: String, organisationId: String, paginationInput: PaginationInput, type: TransactionType, userId: String): PaginatedTransaction!
  transferRequest(id: ID!): TransferRequest!
  transferRequests(filterInput: TransferRequestFilterInput, paginationInput: PaginationInput): PaginatedTransferRequests!
  upcomingChildrenEvents(branchId: String!): [ChildrenEvent!]!
  upcomingCounselingSessions(counselorId: String, days: Int! = 7): [CounselingSession!]!
  upcomingPastoralVisits(days: Int! = 7): [PastoralVisit!]!
  upcomingSacramentAnniversaries(branchId: ID, limit: Int): [SacramentAnniversaryOutput!]!
  userDashboardPreference(branchId: ID!, dashboardType: DashboardType!, organisationId: ID): UserDashboardPreference
  userNotifications(includeRead: Boolean = false, userId: ID!): [NotificationDto!]!
  validateCurrentLicense: JSON!
  validateQRToken(token: String!): AttendanceSession!
  vendor(id: String!): Vendor!
  vendors(organisationId: String): [Vendor!]!
  volunteerSchedule(endDate: DateTime, id: ID!, startDate: DateTime): [VolunteerScheduleItem!]!
  workflowExecution(branchId: String, id: String!, organisationId: String!): WorkflowExecution!
  workflowExecutions(branchId: String, limit: Float! = 50, organisationId: String!, workflowId: String): [WorkflowExecution!]!
  workflowStats(branchId: String, organisationId: String!): WorkflowStats!
  workflowTemplate(branchId: String, id: String!, organisationId: String!): WorkflowTemplate!
  workflowTemplates(branchId: String, filter: WorkflowFilterInput, organisationId: String!): [WorkflowTemplate!]!
}

type QuickLinkItem {
  icon: String
  title: String!
  url: String!
}

type QuickLinksWidget {
  links: [QuickLinkItem!]!
  title: String!
  widgetType: WidgetType!
}

type RecentSacramentsWidget {
  sacraments: [SacramentItem!]!
  title: String!
  widgetType: WidgetType!
}

type RecipientGroup {
  id: ID!
  name: String!
  type: String
}

type RecipientGroupStats {
  groupName: String!
  messagesSent: Int!
  recipientCount: Int!
}

type RecipientInfoDto {
  email: String
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  phoneNumber: String
}

input RecordAttendanceInput {
  branchId: ID
  checkInMethod: String = "MANUAL"
  checkInTime: DateTime
  eventId: ID
  memberId: ID
  notes: String
  recordedById: ID
  sessionId: ID
  visitorEmail: String
  visitorName: String
  visitorPhone: String
}

input RecordBulkAttendanceInput {
  attendanceRecords: [RecordAttendanceInput!]
  branchId: ID
  eventId: ID
  headcount: Float
  recordedById: ID
  sessionId: ID
}

input RefreshTokenInput {
  refreshToken: String!
}

input ReportFilterInput {
  branchId: String
  dateRange: DateRangeInput
  eventTypeId: String
  fundId: String
  groupId: String
  organisationId: String
  searchTerm: String
}

type ReportOutput {
  data: JSON
  downloadUrl: String
  format: OutputFormat!
  generatedAt: DateTime!
  message: String
  reportType: String!
}

input ReportRequestInput {
  filter: ReportFilterInput!
  outputFormat: String
  reportType: String!
}

input RestoreBackupInput {
  backupId: ID!
  description: String
  metadata: JSON
  userId: ID
}

type RetentionRateStat {
  period: String!
  retention_rate: Float!
}

type Role {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  permissions: [Permission]
  updatedAt: DateTime!
  userBranches: [UserBranch]
  users: [AuthUser]
}

type RoleProfile {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type SacramentAnniversaryOutput {
  anniversaryType: String!
  date: DateTime!
  isSpecial: Boolean
  name: String!
  sacramentType: String!
  timeUntil: String
}

type SacramentItem {
  date: DateTime!
  id: String!
  recipientName: String!
  type: String!
}

type SacramentStatsDto {
  totalSacraments: Float!
}

type SacramentStatsOutput {
  count: Float!
  percentage: Float
  period: String
  sacramentType: String!
  trend: String
}

"""Types of sacraments administered in the church"""
enum SacramentType {
  ANOINTING_OF_THE_SICK
  BAPTISM
  CONFIRMATION
  EUCHARIST_FIRST_COMMUNION
  HOLY_ORDERS_DIACONATE
  HOLY_ORDERS_PRIESTHOOD
  MATRIMONY
  OTHER
  RCIA_INITIATION
  RECONCILIATION_FIRST
}

type SacramentalRecord {
  branchId: String!
  certificateNumber: String
  certificateUrl: String
  createdAt: DateTime!
  dateOfSacrament: DateTime!
  godparent1Name: String
  godparent2Name: String
  id: ID!
  locationOfSacrament: String!
  memberId: String!
  notes: String
  officiantId: String
  officiantName: String!
  organisationId: String
  sacramentType: SacramentType!
  sponsorName: String
  updatedAt: DateTime!
  witness1Name: String
  witness2Name: String
}

input SacramentalRecordFilterInput {
  branchId: String
  certificateNumber: String
  dateFrom: DateTime
  dateTo: DateTime
  locationOfSacrament: String
  officiantName: String
  organisationId: String
  sacramentType: SacramentType
}

type SacramentsOverview {
  totalSacraments: Float!
}

input SendEmailInput {
  birthdayRange: BirthdayRangeEnum
  bodyHtml: String
  bodyText: String
  branchId: String

  """Advanced recipient filters such as "all-members", "volunteers", etc."""
  filters: [String!]
  groupIds: [String!]
  organisationId: String
  recipients: [String!]!
  scheduledAt: DateTime
  subject: String!
  templateData: JSON
  templateId: String
}

input SendSmsInput {
  birthdayRange: BirthdayRangeEnum
  branchId: String

  """Advanced recipient filters such as "all-members", "volunteers", etc."""
  filters: [String!]
  groupIds: [String!]
  message: String!
  organisationId: String
  recipients: [String!]!
  scheduledAt: String
}

type Series {
  artworkUrl: String
  branchId: String!
  createdAt: DateTime!
  description: String
  endDate: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  startDate: String
  title: String!
  updatedAt: DateTime!
}

type Sermon {
  audioUrl: String
  branchId: String!
  category: Category
  categoryId: String
  createdAt: String!
  datePreached: String!
  description: String
  duration: Float
  id: ID!
  mainScripture: String
  notesUrl: String
  organisationId: String
  series: Series
  seriesId: String
  speaker: Speaker
  speakerId: String
  status: ContentStatus!
  tags: [Tag!]
  title: String!
  transcriptText: String
  transcriptUrl: String
  updatedAt: String!
  videoUrl: String
}

type Setting {
  branch: Branch
  branchId: ID
  createdAt: DateTime!
  id: ID!
  key: String!
  updatedAt: DateTime!
  value: String!
}

input SignInDto {
  email: Email!
  password: String!
}

input SignUpDto {
  email: Email!
  firstName: String
  lastName: String
  password: String!
  phoneNumber: PhoneNumber
}

type SmallGroup {
  branchId: String
  createdAt: DateTime!
  description: String
  id: ID!
  location: String
  maximumCapacity: Int
  meetingSchedule: String
  members: [GroupMember!]
  ministry: Ministry
  ministryId: String
  name: String!
  organisationId: String
  status: String!
  type: String!
  updatedAt: DateTime!
}

input SmallGroupFilterInput {
  branchId: String
  id: ID
  ministryId: String
  name: String
  organisationId: String
  search: String
  status: String
  type: String
}

type SmsMessageDto {
  body: String!
  branchId: String
  createdAt: DateTime!
  id: ID!
  organisationId: String
  recipientInfo: [RecipientInfoDto!]
  recipients: [String!]!
  senderNumber: String!
  sentAt: DateTime
  status: String!
  updatedAt: DateTime!
}

type Speaker {
  bio: String
  branchId: String!
  createdAt: DateTime!
  email: String
  id: ID!
  imageUrl: String
  memberId: String
  name: String!
  phone: String
  photoUrl: String
  title: String
  updatedAt: DateTime!
  website: String
}

type SpiritualMilestone {
  additionalDetails: JSON
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: ID!
  location: String
  member: Member!
  memberId: ID!
  performedBy: String
  type: MilestoneType!
  updatedAt: DateTime!
}

input SubmissionFilterInput {
  branchId: String
  endDate: DateTime
  formId: String!
  startDate: DateTime
  status: String
}

"""Status of a form submission"""
enum SubmissionStatus {
  COMPLETED
  PENDING
  REJECTED
}

type Subscription {
  cancelAtPeriodEnd: Boolean!
  cancelReason: String
  cancelledAt: DateTime
  createdAt: DateTime!
  currentPeriodEnd: DateTime!
  currentPeriodStart: DateTime!
  customer: Organisation
  customerId: String!
  failedPaymentCount: Int!
  id: ID!
  lastPaymentDate: DateTime
  metadata: JSON
  nextBillingDate: DateTime
  organisation: Organisation
  organisationId: String!
  payments: [SubscriptionPayment!]
  paystackCustomerCode: String
  paystackSubscriptionCode: String
  plan: SubscriptionPlan
  planId: String!
  status: SubscriptionStatus!
  trialEnd: DateTime
  trialStart: DateTime
  updatedAt: DateTime!
}

input SubscriptionFilterInput {
  customerId: String
  dateFrom: String
  dateTo: String
  organisationId: String
  planId: String
  skip: Int = 0
  status: SubscriptionStatus
  take: Int = 50
}

"""Subscription billing interval (DAILY, WEEKLY, MONTHLY, etc.)"""
enum SubscriptionInterval {
  DAILY
  MONTHLY
  QUARTERLY
  WEEKLY
  YEARLY
}

type SubscriptionLifecycleResult {
  cancelledCount: Int!
  expiredCount: Int!
  warningsCount: Int!
}

type SubscriptionLifecycleStats {
  activeSubscriptions: Int!
  cancelledSubscriptions: Int!
  expiringIn7Days: Int!
  expiringIn30Days: Int!
  pastDueSubscriptions: Int!
  totalSubscriptions: Int!
  trialSubscriptions: Int!
}

type SubscriptionPayment {
  amount: Float!
  authorizationCode: String
  createdAt: DateTime!
  currency: String!
  failedAt: DateTime
  failureReason: String
  id: ID!
  invoiceNumber: String
  metadata: JSON
  paidAt: DateTime
  paystackReference: String
  paystackTransactionId: String
  periodEnd: DateTime!
  periodStart: DateTime!
  status: PaymentStatus!
  subscription: Subscription
  subscriptionId: String!
  updatedAt: DateTime!
}

type SubscriptionPlan {
  activeSubscriptionsCount: Int
  amount: Float!
  createdAt: DateTime!
  currency: String!
  description: String
  features: [String!]
  id: ID!
  interval: SubscriptionInterval!
  intervalCount: Int!
  isActive: Boolean!
  metadata: JSON
  name: String!
  organisation: Organisation
  organisationId: String!
  paystackPlanCode: String
  subscriptions: [Subscription!]
  trialPeriodDays: Int
  updatedAt: DateTime!
}

"""Subscription status (ACTIVE, INACTIVE, CANCELLED, etc.)"""
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  PAUSED
  TRIALING
}

type SuccessMessage {
  message: String!
}

type SuperAdminDashboardData {
  activityEngagement: ActivityEngagement!
  announcements: Announcements!
  attendanceOverview: AttendanceOverview!
  branchesSummary: BranchesSummary!
  financialOverview: FinancialOverview!
  memberSummary: MemberSummary!
  organisationOverview: OrganisationOverview!
  sacramentsOverview: SacramentsOverview!
  systemHealth: SystemHealth!
}

type SystemDatabaseDto {
  latency: Float!
  status: String!
}

type SystemHealth {
  database: DatabaseHealth!
  system: SystemInfo!
  timestamp: DateTime!
}

type SystemInfo {
  cpuUsage: CpuUsage!
  freeMemory: Float!
  memoryUsage: MemoryUsage!
  nodeVersion: String!
  platform: String!
  processUptime: Float!
  systemUptime: Float!
  totalMemory: Float!
}

type SystemInfoDto {
  cpuUsage: CpuUsageDto!
  freeMemory: Float!
  memoryUsage: MemoryUsageDto!
  nodeVersion: String!
  platform: String!
  processUptime: Float!
  systemUptime: Float!
  totalMemory: Float!
}

type SystemStatusDto {
  database: SystemDatabaseDto!
  system: SystemInfoDto!
  timestamp: DateTime!
}

type Tag {
  id: ID!
  name: String!
}

type TaskItem {
  dueDate: DateTime
  id: String!
  priority: String
  status: String
  title: String!
}

type TasksWidget {
  tasks: [TaskItem!]!
  title: String!
  widgetType: WidgetType!
}

type TokenPayloadDto {
  accessToken: String!
  refreshToken: String!
}

type TopGivingBranch {
  branchId: String!
  branchName: String!
  totalGiven: Float!
}

type TotalAttendanceStat {
  period: String!
  total: Float!
}

type Transaction {
  amount: Float!
  branchId: String
  createdAt: DateTime!
  date: DateTime!
  description: String
  event: Event
  eventId: String
  fund: Fund
  fundId: String
  id: ID!
  memberId: String
  metadata: JSON
  organisationId: String!
  reference: String
  type: TransactionType!
  updatedAt: DateTime!
  userId: String
}

type TransactionStats {
  netBalance: Float!
  totalExpenses: Float!
  totalIncome: Float!
  totalOfferings: Float!
  totalPledges: Float!
  totalTithes: Float!
}

enum TransactionType {
  CONTRIBUTION
  EXPENSE
  FUND_ALLOCATION
  TRANSFER
}

"""Types of data to transfer with the member"""
enum TransferDataType {
  DONATION_HISTORY
  MINISTRIES
  PERSONAL
  SACRAMENTS
}

type TransferRequest {
  approvedDate: DateTime
  completedDate: DateTime
  createdAt: DateTime!
  destinationBranchId: ID!
  destinationBranchName: String!
  id: ID!
  memberId: ID!
  memberName: String!
  reason: String!
  rejectedDate: DateTime
  rejectionReason: String
  requestDate: DateTime!
  sourceBranchId: ID!
  sourceBranchName: String!
  status: TransferStatus!
  transferData: [TransferDataType!]!
  updatedAt: DateTime!
}

input TransferRequestFilterInput {
  destinationBranchId: ID
  memberId: ID
  sourceBranchId: ID
  status: TransferStatus
}

"""Status of a member transfer request"""
enum TransferStatus {
  APPROVED
  COMPLETED
  PENDING
  REJECTED
}

input TriggerWorkflowInput {
  targetData: String
  targetEventId: String
  targetMemberId: String
  triggerData: String
  workflowId: String!
}

type UniqueMembersStat {
  period: String!
  unique_members: Float!
}

type UpcomingEventsWidget {
  events: [EventItem!]!
  title: String!
  widgetType: WidgetType!
}

input UpdateAnnouncementInput {
  content: String
  endDate: String
  isActive: Boolean
  startDate: String
  targetBranchIds: [ID!]
  targetRoleIds: [ID!]
  title: String
}

input UpdateAttendanceSessionInput {
  branchId: String
  date: DateTime
  description: String
  endTime: DateTime
  id: ID!
  latitude: Float
  location: String
  longitude: Float
  name: String
  organisationId: String
  startTime: DateTime
  status: String = "PLANNED"
  type: String
}

input UpdateBranchInput {
  address: String
  city: String
  country: String
  email: String
  establishedAt: DateTime
  isActive: Boolean = true
  name: String
  organisationId: String
  phoneNumber: String
  postalCode: String
  state: String
  website: String
}

input UpdateBranchSettingsInput {
  allowMemberTransfers: Boolean
  allowResourceSharing: Boolean
  attendanceReportingLevel: String
  branchId: ID!
  brandingSettings: BrandingSettingsInput
  currency: String
  financialReportingLevel: String
  language: String
  memberDataVisibility: String
  notificationSettings: NotificationSettingsInput
  timezone: String
  visibilityToOtherBranches: String
}

input UpdateBudgetInput {
  branchId: String
  description: String
  endDate: DateTime
  fiscalYear: Int
  fundId: String
  id: String!
  ministryId: String
  name: String
  notes: String
  organisationId: String
  startDate: DateTime
  status: String
  totalAmount: Float
}

input UpdateCareRequestInput {
  assignedPastorId: String
  completionDate: String
  description: String
  id: String!
  memberId: String
  notes: String
  priority: CareRequestPriority
  requestType: CareRequestType
  status: CareRequestStatus
}

input UpdateCategoryInput {
  id: String!
  name: String
}

input UpdateChildInput {
  allergies: String
  branchId: String
  dateOfBirth: DateTime
  emergencyContactName: String
  emergencyContactPhone: String
  firstName: String
  gender: String
  id: ID!
  lastName: String
  notes: String
  photoConsent: Boolean = false
  specialNeeds: String
}

input UpdateChildrenEventInput {
  ageRange: String
  branchId: String
  capacity: Int
  description: String
  endDateTime: DateTime
  id: ID!
  location: String
  name: String
  startDateTime: DateTime
  volunteersNeeded: Int
}

input UpdateContributionInput {
  amount: Float
  anonymous: Boolean
  branchId: String
  contributionTypeId: String
  date: DateTime
  fundId: String
  id: String!
  memberId: String
  notes: String
  organisationId: String
  paymentMethodId: String
  pledgeId: String
}

input UpdateCounselingSessionInput {
  branchId: String
  counselorId: String
  description: String
  duration: Float
  followUpDate: String
  homework: String
  id: String!
  isConfidential: Boolean
  isRecurring: Boolean
  location: String
  memberId: String
  nextSteps: String
  notes: String
  organisationId: String
  privateNotes: String
  progressNotes: String
  recurringPattern: String
  scheduledDate: String
  sessionNotes: String
  sessionNumber: Float
  sessionType: CounselingSessionType
  status: CounselingSessionStatus
  title: String
  topic: String
  totalSessions: Float
}

input UpdateEmailTemplateInput {
  bodyHtml: String
  bodyText: String
  branchId: String
  description: String
  id: ID!
  isActive: Boolean
  name: String
  organisationId: String
  subject: String
}

input UpdateEventInput {
  branchId: String
  category: String
  description: String
  endDate: DateTime
  id: ID!
  location: String
  organisationId: String
  startDate: DateTime
  title: String
}

input UpdateExpenseCategoryInput {
  branchId: String
  description: String
  id: String!
  name: String
  organisationId: String
}

input UpdateExpenseInput {
  amount: Float
  branchId: String
  budgetId: String
  date: DateTime
  description: String
  expenseCategoryId: String
  fundId: String
  id: String!
  invoiceNumber: String
  organisationId: String
  paymentMethodId: String
  receiptNumber: String
  vendorContact: String
  vendorId: String
  vendorName: String
}

input UpdateFamilyInput {
  address: String
  city: String
  country: String
  customFields: JSON
  id: ID!
  memberIds: [ID!]
  name: String
  phoneNumber: String
  postalCode: String
  state: String
}

input UpdateFamilyRelationshipInput {
  familyId: ID
  id: ID!
  memberId: ID
  relatedMemberId: ID
  relationshipType: FamilyRelationshipType
}

input UpdateFollowUpReminderInput {
  assignedToId: String
  description: String
  dueDate: String
  followUpType: FollowUpType
  id: String!
  memberId: String
  notes: String
  reminderDate: String
  status: FollowUpStatus
  title: String
}

input UpdateFormFieldInput {
  conditionalLogic: JSON
  defaultValue: String
  formId: String
  helpText: String
  id: String!
  isRequired: Boolean = false
  isUnique: Boolean = false
  label: String
  options: JSON
  order: Float
  placeholder: String
  type: FormFieldType
  validations: JSON
  width: Float = 100
}

input UpdateFormInput {
  branchId: String
  description: String
  enableCaptcha: Boolean = false
  expiresAt: DateTime
  id: String!
  isPublic: Boolean = false
  notifyEmails: [String!] = []
  redirectUrl: String
  slug: String
  status: FormStatus = DRAFT
  successMessage: String
  title: String
}

input UpdateFundInput {
  branchId: String
  description: String
  id: String!
  isActive: Boolean
  name: String
  organisationId: String
}

input UpdateGroupMemberInput {
  role: String
  status: String
}

input UpdateGuardianInput {
  address: String
  branchId: String
  canPickup: Boolean = true
  email: String
  firstName: String
  id: ID!
  isPrimaryGuardian: Boolean = false
  lastName: String
  memberId: String
  notes: String
  phone: String
  relationship: String
}

input UpdateLicenseInput {
  contactEmail: String
  contactPhone: String
  expiryDate: DateTime
  features: JSON
  maxBranches: Float
  maxUsers: Float
  notes: String
  organizationName: String
  status: LicenseStatus
}

input UpdateMediaItemInput {
  branchId: String
  description: String
  fileSize: Float
  fileUrl: String
  id: String!
  mimeType: String
  title: String
  type: String
}

input UpdateMemberInput {
  address: String
  baptismDate: DateTime
  branchId: ID
  city: String
  confirmationDate: DateTime
  country: String
  customFields: JSON
  dateOfBirth: DateTime
  email: String
  employerName: String
  firstName: String
  gender: String
  id: ID!
  lastName: String
  maritalStatus: MaritalStatus
  membershipDate: DateTime
  middleName: String
  notes: String
  occupation: String
  organisationId: ID
  parentId: ID
  phoneNumber: String
  postalCode: String
  privacySettings: JSON
  profileImageUrl: String
  spouseId: ID
  state: String
  status: MemberStatus = ACTIVE
  userId: ID
}

input UpdateMinistryInput {
  branchId: String
  description: String
  name: String
  organisationId: ID
  parentId: String
  status: String
  type: String
}

input UpdateOrganisationInput {
  accentColor: String
  address: String
  brandFont: String
  city: String
  country: String
  currency: String
  denomination: String
  description: String
  email: String
  faviconUrl: String
  fontFamily: String
  foundingYear: Float
  id: ID!
  logoUrl: String
  missionStatement: String
  name: String
  phoneNumber: String
  primaryColor: String
  secondaryColor: String
  size: String
  slogan: String
  socialHandle: String
  state: String
  timezone: String
  vision: String
  website: String
  zipCode: String
}

input UpdatePastoralVisitInput {
  description: String
  followUpDate: String
  id: String!
  location: String
  memberId: String
  notes: String
  pastorId: String
  scheduledDate: String
  status: PastoralVisitStatus
  title: String
  visitType: PastoralVisitType
}

input UpdatePermissionInput {
  action: String
  description: String
  subject: String
}

input UpdatePlanDto {
  amount: Float
  currency: String
  description: String
  features: [String!]
  interval: SubscriptionInterval
  intervalCount: Int
  invoiceLimit: Int
  isActive: Boolean
  metadata: JSON
  name: String
  sendInvoices: Boolean
  sendSms: Boolean
  trialPeriodDays: Int
}

input UpdatePledgeInput {
  amount: Float
  branchId: String
  endDate: DateTime
  frequency: String
  fundId: String
  id: String!
  memberId: String
  notes: String
  organisationId: String
  startDate: DateTime
  status: String
}

input UpdatePrayerRequestInput {
  assignedPastorId: String
  branchId: ID
  memberId: ID
  organisationId: String
  requestText: String
  status: PrayerRequestStatusEnum
}

input UpdateRoleInput {
  description: String
  name: String
}

input UpdateSacramentalRecordInput {
  branchId: String
  certificateNumber: String
  certificateUrl: String
  dateOfSacrament: DateTime
  godparent1Name: String
  godparent2Name: String
  id: String!
  locationOfSacrament: String
  memberId: String
  notes: String
  officiantId: String
  officiantName: String
  organisationId: String
  sacramentType: SacramentType
  sponsorName: String
  witness1Name: String
  witness2Name: String
}

input UpdateSeriesInput {
  artworkUrl: String
  branchId: String
  description: String
  endDate: String
  id: String!
  startDate: String
  title: String
}

input UpdateSermonInput {
  audioUrl: String
  branchId: String
  categoryId: String
  datePreached: String
  description: String
  duration: Float
  id: String!
  mainScripture: String
  notesUrl: String
  organisationId: String
  seriesId: String
  speakerId: String
  status: String
  tags: [String!]
  title: String
  transcriptText: String
  transcriptUrl: String
  videoUrl: String
}

input UpdateSettingInput {
  branchId: String
  id: ID
  key: String
  value: String
}

input UpdateSmallGroupInput {
  branchId: String
  description: String
  location: String
  maximumCapacity: Int
  meetingSchedule: String
  ministryId: String
  name: String
  status: String
  type: String
}

input UpdateSpeakerInput {
  bio: String
  branchId: String
  id: String!
  imageUrl: String
  memberId: String
  name: String
}

input UpdateSpiritualMilestoneInput {
  additionalDetails: JSON
  date: DateTime
  description: String
  id: ID!
  location: String
  memberId: ID
  performedBy: String
  type: MilestoneType
}

input UpdateSubscriptionInput {
  cancelAtPeriodEnd: Boolean
  cancelReason: String
  metadata: JSON
  status: SubscriptionStatus
}

input UpdateTransactionInput {
  amount: Float
  branchId: String
  date: String
  description: String
  eventId: String
  fundId: String
  id: ID!
  memberId: String
  metadata: JSON
  organisationId: String
  reference: String
  type: TransactionType
  userId: String
}

input UpdateTransferRequestInput {
  id: ID!
  rejectionReason: String
  status: TransferStatus
}

input UpdateVendorInput {
  address: String
  branchId: String
  contactEmail: String
  contactPerson: String
  id: String!
  name: String
  organisationId: String
  phone: String
}

input UpdateVolunteerInput {
  backgroundCheckStatus: String = "PENDING"
  branchId: String
  id: ID!
  memberId: String
  role: String
  trainingCompleted: Boolean = false
}

input UpdateWorkflowTemplateInput {
  actions: [WorkflowActionInput!]
  description: String
  name: String
  status: WorkflowStatus
  triggerConfig: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: ID!
  isActive: Boolean!
  lastName: String
  name: String!
  phoneNumber: String
  roles: [String!]
  updatedAt: DateTime!
}

type UserBranch {
  assignedAt: DateTime!
  assignedBy: ID
  branch: Branch
  branchId: String
  role: Role!
  roleId: ID!
  user: AuthUser!
  userId: ID!
}

type UserBranchProfile {
  assignedAt: DateTime!
  assignedBy: String
  branch: BranchProfile
  branchId: String
  role: RoleProfile!
  roleId: String!
  userId: String!
}

type UserDashboardPreference {
  branchId: ID!
  createdAt: DateTime!
  dashboardType: DashboardType!
  id: ID!
  layoutConfig: JSON!
  updatedAt: DateTime!
  userId: ID!
}

input UserFilterInput {
  emailContains: String
  isActive: Boolean
  nameContains: String
  organisationId: ID
  roleId: ID
}

input UserInput {
  branchId: ID
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  roleName: String!
}

type UserProfile {
  createdAt: DateTime!
  email: Email!
  firstName: String
  id: ID!
  isActive: Boolean!
  isEmailVerified: Boolean!
  lastLoginAt: DateTime
  lastName: String
  member: MemberProfile
  organisationId: String
  phoneNumber: String
  roles: [RoleProfile!]
  updatedAt: DateTime!
  userBranches: [UserBranchProfile!]
}

type Vendor {
  address: String
  branchId: String
  contactEmail: String
  contactPerson: String
  contactPhone: String
  id: String!
  name: String!
  organisationId: String
}

input VerifyPaymentInput {
  contactEmail: String
  contactName: String
  organizationId: String!
  planId: String!
  reference: String!
}

type VisitorsStat {
  period: String!
  visitors: Float!
}

type VolunteerEventAssignment {
  createdAt: DateTime!
  eventId: String!
  id: ID!
  role: String
  updatedAt: DateTime!
  volunteerId: String!
}

type VolunteerScheduleItem {
  assignment: VolunteerEventAssignment!
  event: ChildrenEvent!
}

"""Types of widgets available for dashboards"""
enum WidgetType {
  ANNOUNCEMENTS
  ATTENDANCE_SNAPSHOT
  BIRTHDAYS
  CHART
  GIVING_SUMMARY
  KPI_CARD
  MINISTRY_INVOLVEMENT
  MY_GROUPS
  NEW_MEMBERS
  NOTIFICATIONS
  PRAYER_REQUESTS
  PRAYER_REQUEST_SUMMARY
  QUICK_LINKS
  RECENT_SACRAMENTS
  TASKS
  UPCOMING_EVENTS
}

type WorkflowAction {
  actionConfig: String!
  actionType: WorkflowActionType!
  conditions: String
  createdAt: DateTime!
  delayMinutes: Float
  id: ID!
  stepNumber: Float!
  updatedAt: DateTime!
  workflowId: String!
}

type WorkflowActionExecution {
  action: WorkflowAction
  actionId: String!
  completedAt: DateTime
  createdAt: DateTime!
  errorMessage: String
  executionId: String!
  id: ID!
  result: String
  startedAt: DateTime
  status: WorkflowExecutionStatus!
  updatedAt: DateTime!
}

input WorkflowActionInput {
  actionConfig: String!
  actionType: String!
  conditions: String
  delayMinutes: Float
}

enum WorkflowActionType {
  CREATE_TASK
  SEND_EMAIL
  SEND_NOTIFICATION
  SEND_SMS
  UPDATE_MEMBER_STATUS
  WAIT_DELAY
}

type WorkflowExecution {
  actionExecutions: [WorkflowActionExecution!]
  branchId: String
  completedAt: DateTime
  createdAt: DateTime!
  duration: Float
  errorMessage: String
  id: ID!
  organisationId: String!
  startedAt: DateTime
  status: WorkflowExecutionStatus!
  targetData: String
  targetEventId: String
  targetMemberId: String
  triggerData: String
  triggeredBy: String
  updatedAt: DateTime!
  workflow: WorkflowTemplate
  workflowId: String!
}

enum WorkflowExecutionStatus {
  CANCELLED
  COMPLETED
  FAILED
  PENDING
  RUNNING
}

input WorkflowFilterInput {
  branchId: String
  organisationId: String
  searchTerm: String
  status: WorkflowStatus
  type: WorkflowType
}

type WorkflowStats {
  activeWorkflows: Float!
  averageExecutionTime: Float!
  executionsThisMonth: Float!
  executionsThisWeek: Float!
  executionsToday: Float!
  failedExecutions: Float!
  successfulExecutions: Float!
  totalExecutions: Float!
  totalWorkflows: Float!
}

enum WorkflowStatus {
  ACTIVE
  DELETED
  INACTIVE
  PAUSED
}

type WorkflowTemplate {
  actions: [WorkflowAction!]!
  branchId: String
  createdAt: DateTime!
  createdBy: String!
  description: String
  executionCount: Float
  executions: [WorkflowExecution!]
  id: ID!
  name: String!
  organisationId: String!
  status: WorkflowStatus!
  successRate: Float
  triggerConfig: String
  triggerType: WorkflowTriggerType!
  type: WorkflowType!
  updatedAt: DateTime!
}

enum WorkflowTriggerType {
  ATTENDANCE_RECORDED
  CUSTOM_DATE
  DONATION_RECEIVED
  EVENT_APPROACHING
  EVENT_CREATED
  MEMBERSHIP_EXPIRING
  MEMBER_CREATED
  MEMBER_UPDATED
}

enum WorkflowType {
  DONATION_ACKNOWLEDGMENT
  EVENT_REMINDER
  FOLLOW_UP
  MEMBERSHIP_RENEWAL
}